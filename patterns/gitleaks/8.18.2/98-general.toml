[[rules]]
  id = 'c42a367392fc3aadefbf9caa4de4582a790b8746ed72e6e97fca6f962502597a'
  description = 'ArgoCD JWT'
  # Based on shifted b64 encoded portions of '"iss":"argocd"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:ImlzcyI6ImFyZ29jZC|Jpc3MiOiJhcmdvY2Qi|iaXNzIjoiYXJnb2NkI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'imlzcyi6imfyz29jzc',
    'jpc3mioijhcmdvy2qi',
    'iaxnzijoiyxjnb2nki',
  ]

[[rules]]
  id = 'ab58b5955845a843962cb6ac631b1d44a0cef6a37e060988e7e58b039706ca51'
  description = 'AWS IAM Unique Identifier'
  # The funky not group at the beginning consists of ascii ranges
  regex = '''(?:^|[^!$-&\(-9<>-~])((?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]{16}))\b'''
  tags = ['alert:repo-owner', 'type:secret']
  entropy = 3.2
  secretGroup = 1
  keywords = [
    'a3t',
    'abia',
    'acca',
    'agpa',
    'aida',
    'aipa',
    'akia',
    'anpa',
    'anva',
    'aroa',
    'asia',
  ]

  [rules.allowlist]
    regexTarget = 'line'
    regexes = [
      # Ingore example keys
      '''\b(?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]*)EXAMPLE\b''',
      # Ignore presigned URLs
      '''X-Amz-Signature''',
      # Ignore sample/example values
      '''(?i)(sample|example).{0,128}\b(?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]{16})\b''',
    ]

[[rules]]
  id = '308f20b091650166decc757badd05c51384601ac6d10c11d5282c37004fff959'
  description = 'AWS Secret Access Key'
  regex = '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?([a-z0-9\/+]{40})\b'''
  tags = ['alert:repo-owner', 'type:secret']
  entropy = 4
  secretGroup = 1
  keywords = [
    'aws',
  ]

  [rules.allowlist]
    regexTarget = 'line'
    regexes = [
      # Ignore ARNs here
      '''arn:aws:iam:''',
      # Ignore common placeholders
      '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?[a-z0-9\/+]*(?:example|abcdef|get|name|serv|spec|profile|role|resource|test|curl|cont|conf|cert)''',
      # Ignore EXAMPLE base64 encoded
      '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?[a-z0-9\/+]*(?-i)(?:RVhBTVBMR|VYQU1QTE|FWEFNUExF)''',
    ]

# TODO
# "Container Registry Authentication"
# "Dynatrace Token"
# "Facebook Secret Key"
# "General Secret"
# "GitHub Fine-Grained Personal Access Token"
# "GitHub OAuth Access Token"
# "GitHub Personal Access Token"
# "GitHub Refresh Token"
# "GitHub Server to Server Token"
# "GitHub User to Server Token"
# "GitLab Access Token"
# "GitLab Pipeline Trigger Token"
# "GitLab Runner Registration Token"
# "Google API Key"
# "Heroku API Key"
# "Htpasswd File"
# "Kubernetes Service Account JWT"
# "MailChimp API Key"
# "Mailgun API Key"
# "NPM Access Token"
# "OpenShift Login Token"
# "PayPal Braintree Access Token"
# "Picatic API Key"
# "PKCS #12 File"

[[rules]]
  id = 'd5929654009ea640795908a2dcdb07f2f0ebbef42d1ac472bace4b4cd458ce98'
  description = 'Private Key'
  regex = '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\s\S-]*?-----END[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
      '-----begin',
  ]

  [rules.allowlist]
    regexTarget = "line"
    paths = [
      # Test data are often false positives
      '''(^|\/)testdata\/''',
      # Ignore keys in a test(s) folder
      '''test(s)?\/.*.(txt|der|key|pem)$''',
      # Ignore keys with test in their name
      '''[^\/]+test[^\/]+(txt|der|key|pem)$''',
      # Ignore common example keys
      '''(dummy|example).*(key|pem)''',
      # Ignore ssh utilities that might have key headers in them
      '''\/(s)?bin\/ssh(-add|-agent|-autoproxy|-copy-id|-keygen|-keyscan|-sign-request|d)?$''',
      # Ignore libs that might have key headers in them
      '''\/lib\w+\/lib(gnutls|ssh).so''',
      # Ignore utils that might have key headers in them
      '''\/lib\w+\/(cockpit-|openssh\/ssh-)''',
      # Data dirs that contain key headers to identify them
      '''\/usr\/share\/(mime|misc)''',
    ]

    regexes = [
      # Anything less than 15 characters
      '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----[\s\S-]{0,15}-----END[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----''',
      '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----[\s\S-]*?(\.\.\.|\*\*\*|xxx)[\s\S-]*?-----END[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----''',
      # Ignore some keys assigned to test vars
      # e.g. TEST_SERVER_KEY = """-----BEGIN RSA PRIVATE KEY-----
      '''(?i)\w*(fake|example|test)\w*\s*[:=]+\s*(?:\[)?\s*(?:\"\"\"|\"|\'|`)?-----BEGIN''',
      # Things that look like code looking for headers
      #   like: if (privateKey === "-----BEGIN RSA PRIVATE KEY-----") {
      '''if.*==\s*?[\"|\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\"|\']''',
      #   like: ("-----BEGIN RSA PRIVATE KEY-----")
      '''\([\"\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----(\\n)?[\"\']''',
      #  things ending with stuff like # noqa: E501
      '''#\s*?noqa(:[\s\w]+)?$''',
    ]

# TODO
# "PyPI Upload Token"
# "SendGrid API Key"
# "Shopify Access Token"
# "Shopify Custom App Access Token"
# "Shopify Private App Access Token"
# "Shopify Shared Secret"
# "Slack Bot Token"
# "Slack Legacy Bot Token"
# "Slack Legacy Token"
# "Slack Legacy Workspace Token"
# "Slack User Token"
# "Slack Webhook URL"
# "Square Access Token"
# "Square OAuth Secret"
# "Stripe API Key"
# "Twilio API Key"
# "URL User and Password"
# "WP-Config"
