[[rules]]
  id = 'c42a367392fc3aadefbf9caa4de4582a790b8746ed72e6e97fca6f962502597a'
  description = 'ArgoCD JWT'
  # Based on shifted b64 encoded portions of '"iss":"argocd"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:ImlzcyI6ImFyZ29jZC|Jpc3MiOiJhcmdvY2Qi|iaXNzIjoiYXJnb2NkI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'imlzcyi6imfyz29jzc',
    'jpc3mioijhcmdvy2qi',
    'iaxnzijoiyxjnb2nki',
  ]

[[rules]]
  id = 'ab58b5955845a843962cb6ac631b1d44a0cef6a37e060988e7e58b039706ca51'
  description = 'AWS IAM Unique Identifier'
  # The funky not group at the beginning consists of ascii ranges
  regex = '''(?:^|[^!$-&\(-9<>-~])((?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]{16}))\b'''
  tags = ['alert:repo-owner', 'type:secret']
  entropy = 3.2
  secretGroup = 1
  keywords = [
    'a3t',
    'abia',
    'acca',
    'agpa',
    'aida',
    'aipa',
    'akia',
    'anpa',
    'anva',
    'aroa',
    'asia',
  ]

  [rules.allowlist]
    regexTarget = 'line'
    regexes = [
      # Ingore example keys
      '''\b(?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]*)EXAMPLE\b''',
      # Ignore presigned URLs
      '''X-Amz-Signature''',
      # Ignore sample/example values
      '''(?i)(sample|example).{0,128}\b(?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]{16})\b''',
    ]

[[rules]]
  id = '308f20b091650166decc757badd05c51384601ac6d10c11d5282c37004fff959'
  description = 'AWS Secret Access Key'
  regex = '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?([a-z0-9\/+]{40})\b'''
  tags = ['alert:repo-owner', 'type:secret']
  entropy = 4
  secretGroup = 1
  keywords = [
    'aws',
  ]

  [rules.allowlist]
    regexTarget = 'line'
    regexes = [
      # Ignore ARNs here
      '''arn:aws:iam:''',
      # Ignore common placeholders
      '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?[a-z0-9\/+]*(?:example|abcdef|get|name|serv|spec|profile|role|resource|test|curl|cont|conf|cert)''',
      # Ignore EXAMPLE base64 encoded
      '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?[a-z0-9\/+]*(?-i)(?:RVhBTVBMR|VYQU1QTE|FWEFNUExF)''',
    ]

[[rules]]
  id = '3161082b147ad645b6d3637f68edcfa87949a79b45004efeef036e2cb7a0edfe'
  description = 'Container Registry Authentication'
  regex = '''\{[\s\S]*?\\?"auths\\?"\s*?:\s*?\{\s*?(?:\\?"(?:[a-z0-9\-]{1,63}\.)+(?:[a-z0-9\-]{1,63})\\?"\s*?:\s*?\{\s*?\\?"auth\\?"\s*?:\s*?\\?".{32,}?\\?",?[\s\S]*?\},?\s*)+\}[\s\S]*}'''
  tags = ['alert:repo-owner', 'type:secret']

[[rules]]
  id = 'e0e0ef11399b51b8efa864542979614bd1bb2288f3cb8bd2aa786e1a4aee9e79'
  description = 'Dynatrace Token'
  regex = '''\bdt0[a-zA-Z]{1}[0-9]{2}\.[A-Z0-9]{24}\.[A-Z0-9]{64}\b'''
  tags = ['alert:repo-owner', 'type:secret']

[[rules]]
  id = 'fc611155cdab32cb4ac3edf51045a9f73e066eee77c2c8d9771b29e7849212c0'
  description = 'Facebook Access Token'
  regex = '''(?i)\b(\d{15,16}(\||%)[0-9a-z\-_]{27,40})(?:['|\"|\n|\r|\s|\x60|;]|$)'''
  tags = ['alert:repo-owner', 'type:secret']

[[rules]]
  id = '014d5c9e226a6458ec434d9a0d00f886f2fc7d8267c69daa10d510aebc5ad9b3'
  description = 'Facebook Page Access Token'
  regex = '''(?i)\b(EAA[MC][a-z0-9]{20,})(?:['|\"|\n|\r|\s|\x60|;]|$)'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'eaam',
    'eaac',
   ]

[[rules]]
  id = '13852bbfce4794be0e9740ef28cd7cb9d06776b8d6428e3b4e8350bb03260528'
  description= 'Facebook Secret'
  regex = '''(?i)(?:facebook)(?:[0-9a-z\-_\t .]{0,20})(?:[\s|']|[\s|"]){0,3}(?:=|>|:{1,3}=|\|\|:|<=|=>|:|\?=)(?:'|\"|\s|=|\x60){0,5}([a-f0-9]{32})(?:['|\"|\n|\r|\s|\x60|;]|$)'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'facebook',
  ]

# TODO
# 'General Secret'

[[rules]]
  id = 'f71af8c158940a1539bfb08feaa24e36bf584c9c819002ea989c6aa35319d2db'
  description = 'GitHub Fine-Grained Personal Access Token'
  regex = '''\bgithub_pat_\w{82}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'github_pat_',
  ]

[[rules]]
  id = 'a4ec986531bed1c154627c941eda6a95ef016481574cdfcb34249b648eb85ec7'
  description = 'GitHub Personal Access Token'
  regex = '''\bghp_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'ghp_',
  ]

[[rules]]
  id = '0e347181fa64a66c62628972058788e0caf23a3c6a5be7822a01f29b65a6a9f0'
  description = 'GitHub OAuth Access Token'
  regex = '''\bgho_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'gho_',
  ]

[[rules]]
  id = 'afe1c727a3b8fb95f9b4e08ff05d501c5faab40e3c621ebc95468bae6dfb7d1b'
  description = 'GitHub User to Server Token'
  regex = '''\bghu_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'ghu_',
  ]

[[rules]]
  id = '357286368ed645f842a99b4b1bf585181a6edf2e466287fa97fa8e887729e614'
  description = 'GitHub Server to Server Token'
  regex = '''\bghs_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'ghs_',
  ]

[[rules]]
  id = '86141b0de6dfc25b4ff6fe7c74c9283367a1d1c9c2d4df99ad9b8948e5d462db'
  description = 'GitHub Refresh Token'
  regex = '''\bghr_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'ghr_',
  ]

[[rules]]
  id = '0f6a47c693ad7a56c4a835f6aa7b38d18c343becae2f833fac2db51ecebd79e2'
  description = 'GitLab Access Token'
  regex = '''\bglpat-[\w\-]{20}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'glpat-',
  ]

[[rules]]
  id = '798acef3dc3135b6c9482635a042cb405e3c050631ef0e3ccc3556dddc9254d1'
  description = 'GitLab Pipeline Trigger Token'
  regex = '''\bglptt-[0-9a-f]{40}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'glptt-',
  ]

[[rules]]
  id = '7561d77130281f0e7b2339650a591ca94bf46c41dd9ca8cfe137fd4a1953d1b8'
  description = 'GitLab Runner Registration Token'
  regex = '''\b(?:glrt-|GR1348941)[\w\-]{20}\b'''
  entropy = 2
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'glrt-',
    'gr1348941',
  ]

# TODO
# 'General Secret'
# "Google API Key"
# "Heroku API Key"
# "Htpasswd File"
# "Kubernetes Service Account JWT"
# "MailChimp API Key"
# "Mailgun API Key"
# "NPM Access Token"
# "OpenShift Login Token"
# "PayPal Braintree Access Token"
# "Picatic API Key"
# "PKCS #12 File"

[[rules]]
  id = 'd5929654009ea640795908a2dcdb07f2f0ebbef42d1ac472bace4b4cd458ce98'
  description = 'Private Key'
  regex = '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\s\S-]*?-----END[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
      '-----begin',
  ]

  [rules.allowlist]
    regexTarget = "line"
    paths = [
      # Test data are often false positives
      '''(^|\/)testdata\/''',
      # Ignore keys in a test(s) folder
      '''test(s)?\/.*.(txt|der|key|pem)$''',
      # Ignore keys with test in their name
      '''[^\/]+test[^\/]+(txt|der|key|pem)$''',
      # Ignore common example keys
      '''(dummy|example).*(key|pem)''',
      # Ignore ssh utilities that might have key headers in them
      '''\/(s)?bin\/ssh(-add|-agent|-autoproxy|-copy-id|-keygen|-keyscan|-sign-request|d)?$''',
      # Ignore libs that might have key headers in them
      '''\/lib\w+\/lib(gnutls|ssh).so''',
      # Ignore utils that might have key headers in them
      '''\/lib\w+\/(cockpit-|openssh\/ssh-)''',
      # Data dirs that contain key headers to identify them
      '''\/usr\/share\/(mime|misc)''',
    ]

    regexes = [
      # Ignore example keys
      '''(?i)-----BEGIN (DUMMY|EXAMPLE|FAKE|TEST) PRIVATE KEY(?: BLOCK)?-----''',
      # Anything less than 15 characters
      '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----[\s\S-]{0,15}-----END[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----''',
      '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----[\s\S-]*?(\.\.\.|\*\*\*|xxx)[\s\S-]*?-----END[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----''',
      # Ignore some keys assigned to test vars
      # e.g. TEST_SERVER_KEY = """-----BEGIN RSA PRIVATE KEY-----
      '''(?i)\w*(dummy|example|fake|test)\w*\s*[:=]+\s*(?:\[)?\s*(?:\"\"\"|\"|\'|`)?-----BEGIN''',
      # Things that look like code looking for headers
      #   like: if (privateKey === "-----BEGIN RSA PRIVATE KEY-----") {
      '''if.*==\s*?[\"|\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\"|\']''',
      #   like: ("-----BEGIN RSA PRIVATE KEY-----")
      '''\([\"\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----(\\n)?[\"\']''',
      #  things ending with stuff like # noqa: E501
      '''#\s*?noqa(:[\s\w]+)?$''',
    ]

# TODO
# "PyPI Upload Token"
# "SendGrid API Key"
# "Shopify Access Token"
# "Shopify Custom App Access Token"
# "Shopify Private App Access Token"
# "Shopify Shared Secret"
# "Slack Bot Token"
# "Slack Legacy Bot Token"
# "Slack Legacy Token"
# "Slack Legacy Workspace Token"
# "Slack User Token"
# "Slack Webhook URL"
# "Square Access Token"
# "Square OAuth Secret"
# "Stripe API Key"
# "Twilio API Key"
# "URL User and Password"
# "WP-Config"
