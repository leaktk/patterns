[[rules]]
  id = 'nPY_Rcj4gzY'
  description = 'ArgoCD JWT'
  # Based on shifted b64 encoded portions of '"iss":"argocd"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:ImlzcyI6ImFyZ29jZC|Jpc3MiOiJhcmdvY2Qi|iaXNzIjoiYXJnb2NkI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'imlzcyi6imfyz29jzc',
    'jpc3mioijhcmdvy2qi',
    'iaxnzijoiyxjnb2nki',
  ]

[[rules]]
  id = 'LAJoYTdoQH4'
  description = 'AWS IAM Unique Identifier'
  # The funky not group at the beginning consists of ascii ranges
  regex = '''(?:^|[^!$-&\(-9<>-~])((?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16})\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  secretGroup = 1
  keywords = [
    'a3t',
    'abia',
    'acca',
    'agpa',
    'aida',
    'aipa',
    'akia',
    'anpa',
    'anva',
    'aroa',
    'asia',
  ]

  [rules.allowlist]
    stopwords = [
      'example',
    ]

    regexTarget = 'line'
    regexes = [
      # Ignore presigned URLs
      '''X-Amz-Signature''',
      # Ignore sample/example values
      '''(?i)(?:sample|example).{0,128}\b(?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]{16})\b''',
    ]

[[rules]]
  id = '9j_rmwDeioM'
  description = 'AWS Secret Access Key'
  regex = '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?([a-z0-9\/+]{40})\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 4
  secretGroup = 1
  keywords = [
    'aws',
  ]

  [rules.allowlist]
    stopwords = [
      'abcdef',
      'cert',
      'conf',
      'cont',
      'curl',
      'example',
      'fake',
      'get',
      'name',
      'profile',
      'resource',
      'role',
      'sample',
      'serv',
      'spec',
      'test',
      'xxxxx',
    ]

    regexTarget = 'line'
    regexes = [
      # Ignore ARNs here
      '''arn:aws:iam:''',
      # Ignore example|EXAMPLE base64 encoded
      '''(?i)aws[\w\-]{0,32}[\'\"]?\s*?[:=\(]\s*?[\'\"]?[a-z0-9\/+]*(?-i)(?:ZXhhbXBsZ|V4YW1wbG|leGFtcGxl|RVhBTVBMR|VYQU1QTE|FWEFNUExF)''',
    ]

[[rules]]
  id = 'zl044yuux24'
  description = 'Azure Active Directory Client Secret'
  regex = '''(?:[^a-zA-Z0-9_~.-]|\A)([a-zA-Z0-9_~.-]{3}\dQ~[a-zA-Z0-9_~.-]{31,34})(?:[^a-zA-Z0-9_~.-]|\z)'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3
  secretGroup = 1

[[rules]]
  id = 'd01DtP9iA8I'
  # Sometimes the values in the config are base64 encoded (e.g. in the case of openshift secrets)
  description = 'Base64 Encoded AWS Secret Access Key'
  regex = '''[a-zA-Z0-9\/\+]*(?:YXdzX2FjY2Vzc19rZXlfaW|F3c19hY2Nlc3Nfa2V5X2lk|hd3NfYWNjZXNzX2tleV9pZ)[a-zA-Z0-9\/\+]*(?:QUtJQ|FLSU|BS0lB|UVV0Sl|FVdEpR|RVXRKU|RkxTV|ZMU1|GTFNV|QlMwbE|JTMGxC|CUzBsQ)[a-zA-Z0-9\/\+]*(?:YXdzX3NlY3JldF9hY2Nlc3Nfa2V5|F3c19zZWNyZXRfYWNjZXNzX2tle|hd3Nfc2VjcmV0X2FjY2Vzc19rZX)[a-zA-Z0-9\/\+]+={0,2}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'yxdzx2fjy2vzc19rzxlfaw',
    'f3c19hy2nlc3nfa2v5x2lk',
    'hd3nfywnjzxnzx2tlev9pz',
  ]


[[rules]]
  id = 'gpfGmO3HH64'
  description = 'Container Registry Authentication'
  regex = '''\\*\"auths\\*\"\s*:\s*\{\s*(?:\\*\"(?:[a-z0-9\-]{1,63}\.)+(?:[a-z0-9\-]{1,63})\\*\"\s*:\s*\{\s*\\*\"auth\\*\"\s*:\s*\\*\"[\w\/+-]{32,}={0,2}\\*\"[\s\S]*?\},?\s*)+\}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '"auths',
  ]

  [rules.allowlist]
    regexTarget = 'match'
    regexes = [
      # Ignore redacted secrets
      '''\"auth\\*\"\s*:\s*\\*\"[^"]*(?:\.\.\.|\*\*\*)[^"]*\\?\"''',
      # Ignore emails containing example
      '''\"email\\*\"\s*:\s*\\*\"[^"]*(?i)example[^"]*\\*\"''',
    ]

[[rules]]
  id = 'me-TlU0uKS8'
  description = 'Dynatrace Token'
  regex = '''\bdt0[a-zA-Z]{1}[0-9]{2}\.[A-Z0-9]{24}\.[A-Z0-9]{64}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'dt0',
  ]

[[rules]]
  id = 'bzBQF-LMlZU'
  description = 'Facebook Access Token'
  regex = '''\bEAACEdEose0cBA(?i)[a-z0-9]{128,256}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'eaacedeose0cba',
  ]

[[rules]]
  id = 'fdc8WJ7tfUA'
  description = 'Facebook Secret'
  regex = '''(?i)(?:facebook)(?:[0-9a-z\-_\t .]{0,20})(?:[\s|']|[\s|"]){0,3}(?:=|>|:{1,3}=|\|\|:|<=|=>|:|\?=)(?:'|\"|\s|=|\x60){0,5}([a-f0-9]{32})(?:[\'\"\s\x60;,]|$)'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'facebook',
  ]

[[rules]]
  id = 'mC5kOxQ6kn4'
  description = 'Generic Secret'
  # This one looks for tokens in files with extensions like:
  # - app.clientSecret
  # - cluster.token
  # - user.password
  path = '''(?i)\.[\w\-]*(?:password|secret|token)$'''
  regex = '''[\S]{8,}'''
  entropy = 3.35
  tags = ['type:secret', 'alert:repo-owner']

  [rules.allowlist]
    stopwords = [
      'change',
      'example',
      'insert',
      'passp',
      'passw',
      'placeholder',
      'test',
    ]

    paths = [
      # Test data files are often false positives
      '''(?:^|\/)testdata\/''',
    ]

    regexes = [
      # Common placeholder values only have lower case letters and dashes
      '''^[a-z\-]+$''',
      # shebangs
      '''^#!\s*\/''',
    ]

[[rules]]
  id = '_-9w6-yrc-4'
  description = 'Generic Secret'
  # Things like:
  #   password = "value"
  #   password_key = "value"
  #   password-key = "value"
  #   secret = "value"
  #   secret = 'value'
  #   secret_key = "value"
  #   secret-key = "value"
  #   secretkey = "value"
  #   config["secret"] = "value"
  #   token = "value"
  #   ...
  regex = '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']([^\"\s]+?)[\"\']'''
  entropy = 3.35
  secretGroup = 1
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'password',
    'secret',
    'token',
  ]

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(?:^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(?:cli.+\/command_modules\/(?:[^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
      # Ignore OpenAPI spec files
      '''(?:^|\/)openapi\.json$''',
      '''(?i)openapi.*github[^\/]*\.json$''',
    ]

    stopwords = [
      '/etc/',
      '/run/',
      '/var/',
      '1234',
      'abc123',
      'abcd',
      'admin',
      'ansible',
      'bool:',
      'change',
      'client',
      'configuration',
      'confirm',
      'contrase',
      'credentials',
      'd3faultentry',
      'data/',
      'default',
      'demo',
      'django',
      'enter',
      'everyone',
      'example',
      'fake',
      'hash',
      'here',
      'invalid',
      'java',
      'json',
      'login',
      'manager',
      'openstack',
      'passp',
      'passw',
      'path',
      'placeholder',
      'principal',
      'private',
      'provide',
      'quickstart',
      'redhat',
      'registry',
      'replace',
      'required',
      'sample',
      'schema',
      'secret',
      'string',
      'test',
      'theblurstoftimes',
      'token',
      'update',
      'uuid',
      'value',
      'xxxxx',
      'your_',
    ]

    regexTarget = 'line'
    regexes = [
      # Things like:
      #   secret = "asdfasdfas" # nosec (used by bandit)
      '''#\s*?nosec(?:\s+|$)''',
      #   secret = "asdfasdfas" # noqa: E501
      '''#\s*?noqa(?::[\s\w]+)?$''',
      #   secret = "asdfasdfas" //nolint:gosec
      '''\/\/\s*?nolint:gosec(?:\s+|$)''',
      #   secret = "_PLACEHOLDER_"
      #   secret = "<PLACEHOLDER>"
      #   secret = "@PLACEHOLDER@"
      #   secret = ").append("foo")
      #   secret = "%PLACEHOLDER%"
      #   secret = "$PLACEHOLDER$"
      #   secret = "`PLACEHOLDER`"
      #   secret = "[PLACEHOLDER]"
      #   secret = "[%PLACEHOLDER%]"
      #   secret = "$(PLACEHOLDER..."
      #   secret = "\$(PLACEHOLDER..."
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:_.+?_|<.+?>|@.+?@|\).+?\(|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|\\?\$\(.*)[\"\']''',
      #   secret = "ALL_UPPER_LETTERS_OR_UNDERSCORES"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)[A-Z_]{5,}?[\"\']''',
      #   secret = "{PLACEHOLDER}"
      #   secret = "%{PLACEHOLDER}"
      #   secret = "\%{PLACEHOLDER}"
      #   secret = "${PLACEHOLDER}"
      #   secret = "$\{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      #   secret = "#{PLACEHOLDER}"
      #   secret = "\#{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']\\?[\$%#]?\\?\{.+?\}[\"\']''',
      #   secret = "insert_your_password_here"
      #   secret = "some-ca.crt"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)[a-z._-]{0,32}[\"\']''',
      #   secret = "Some...placeholder"
      #   secret = "Some***placeholder"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][^\"\']*?(?:\.\.\.|\*\*\*|xxxxx).*?[\"\']''',
      #   "secret="+some_var+"asdfa"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   secret = "(optional char)${PLACEHOLDER}(optional text)"
      #   secret = "(optional char)#{PLACEHOLDER}(optional text)"
      #   secret = "FOO_BAR=($|#){PLACEHOLDER}(optional text)"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:(?-i)[A-Z_]{5,})?.?[\$#]\{.{4,}?\}.*?[\"\']''',
      #   secret = "SOME_CONSTANT_PREFIX_${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}${PLACEHOLDER}"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}[\"\']''',
      #   secret = "$SOME_ENV_VARIABLE-optional-text"
      #   secret = "'$SOME_ENV_VARIABLE-optional-text"
      #   secret = "\$SOME_ENV_VARIABLE-optional-text"
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)\'?\\?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?[\"\']''',
      # Ignore these variable prefixes (add to this list as needed for different prefixes
      '''(?i)(?:mock|example|fake)[\w-]+(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:[^\"\s]+?)[\"\']''',
      # Base64 encoded example, EXAMPLE, change, and 12345
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][^\"\']*?(?:ZXhhbXBsZ|V4YW1wbG|leGFtcGxl|RVhBTVBMR|VYQU1QTE|FWEFNUExF|MTIzND|EyMzQ1|xMjM0N|Y2hhbmdl|NoYW5nZ|jaGFuZ2).*?[\"\']''',
      # aws.* is already covered by a different rule
      '''(?i)aws.{0,15}(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?''',
      # jq lookups
      '''jq\s+[\w\-\s]*.*\.\w*(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:&lt;|\\u201c|\\u003c|\$)?(?:#!\/|ask|auto|dict|ENC(?:RYPTED)?[\[\(]|RU5DW|VOQ|FTk|false|file:|fixme|grub|https?:\/\/|installation_prefix|libvirt|none|not|self|ssh|spec\.|str:|(?:my)?te?mp|this).*?[\"\']''',
      ## Ends with
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][^\'\"]*?(\.(?:jpe?g|png|svg|txt|tmpl)|-auth(?:entication)?|-cert(?:ification)?s?|-encryption|-tls|_id|conf(?:ig(?:uration)?)?|cred(?:ential)?s?|data|devel(?:opment)|key|[_-]pwd|raw\(|ya?ml)(?:&gt;|\\u003e)?[\"\']''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}[\"\']''',
       # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?[\"\']''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:\\u[a-z0-9]{4})+[\"\']''',
      # Already covered by the Slack Token rule
      '''xox[baprs]-[0-9a-zA-Z-]{10,48}''',
      # Already covered by GitHub rules
      '''\bgh[oupsr]_[0-9A-Za-z]{36}\b''',
      '''\bgithub_pat_\w{82}\b''',
      # Already covered byt GitLab rules
      '''\bglpat-[\w\-]{20}\b''',
      '''\bglptt-[0-9a-f]{40}\b''',
      '''\b(?:glrt-|GR1348941)[\w\-]{20}\b''',
      # Ignore things that are probably password prompts in code
      # Example: input("Enter Password:") # Something with "quotes" in it
      '''(?i)[\"\'][\s\w]+(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:\s*?[\"\']''',
      # Ignore Bitnami Sealed Secrets - This has the potential to cause false
      # negatives but out of all of our data so far I haven't seen one.
      '''[^A-Za-z0-9+\/]Ag[A-Za-z0-9+\/]{256,}''',
    ]

[[rules]]
  id = 'eCOHX_SKGzA'
  description = 'Generic Secret'
  regex = '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?([^\"\s]+?)(?:\]\]>)?<\/(?:[\s\w\"\'=]*?>)?'''
  entropy = 3.5
  secretGroup = 1
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'password',
    'secret',
    'token',
  ]

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(?:^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(?:cli.+\/command_modules\/(?:[^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]

    stopwords = [
      '1234',
      'client-secret',
      'clientsecret',
      'example',
      'java',
      'newseveryone',
      'passp',
      'passw',
      'redhat',
      'schema',
      'test',
      'token',
    ]

    regexTarget = 'line'
    regexes = [
      # Things like
      #   <secret>asdfasdfas</secret> <!-- nosec -->
      '''(?:\s+|--)nosec(?:\s+|$)''',
      #   <secret>asdfasdfas</secret> <!-- noqa: E501 -->
      '''(?:\s+|--)noqa(?::[\s\w]+)?$''',
      #   secret = "asdfasdfas" <!-- //nolint:gosec -->
      '''\/\/\s*?nolint:gosec(?:\s+|$)''',
      #   <secret>$SOME_ENV_VARIABLE</secret>
      #   <secret>SOME_ENV_VARIABLE</secret>
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?\\?[\$%]?(?-i)[A-Z][0-9A-Z_]{4,}.*?(?:\]\]>)?<\/''',
      #   <secret>${SOME_VARIABLE}</secret>
      #   <secret>$SomeVariable$</secret>
      #   <secret>{SOME_VARIABLE}</secret>
      #   <secret>%{SOME_VARIABLE}</secret>
      #   <secret>$(SOME_VARIABLE)</secret>
      #   <secret>$\{SOME_VARIABLE}</secret>
      #   <secret><SOME_VARIABLE></secret>
      #   <secret>@SOME_VARIABLE@</secret>
      #   <secret>[%SOME_VARIABLE%]</secret>
      #   <secret>[SOME_VARIABLE]</secret>
      #   <secret><%=SOME_VARIABLE%></secret>
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?\\?[\$%]?\\?(?:\{.+?\}|\$\w+?\$|\([\w\.]+\)|<\w+>|@.+?@|%\w+%|_\w+_|<%=.+?%>|\[%\w+%\]|\[.+?\]|`.+?`)(?:\]\]>)?<\/''',
      #   <secret>SOME_CONSTANT_PREFIX_${PLACEHOLDER}</secret>
      #   <secret>/SOME/path:${PLACEHOLDER}</secret>
      #   <secret>/SOME/path:${PLACEHOLDER}${PLACEHOLDER}</secret>
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}(?:\]\]>)?<\/''',
      #   <secret>asdfsadf...adfadsf</secret>(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?\\?[\$%]?\\?(?:\{.+?\}|\$\w+?\$|\([\w\.]+\)|<\w+>|@.+?@|%\w+%|_\w+_|\[%\w+%\]|\[.+?\]|`.+?`)(?:\]\]>)?<\/'
      #   <secret>asdfsadf***asdfsa</secret>
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?[^\"\s]+?(?:\.\.\.|\*\*\*|xxxxx).*?(?:\]\]>)?<\/''',
      #   Base64 encoded example, EXAMPLE, change and 12345
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?[^\"\s]*?(?:ZXhhbXBsZ|V4YW1wbG|leGFtcGxl|RVhBTVBMR|VYQU1QTE|FWEFNUExF|MTIzND|EyMzQ1|xMjM0N|Y2hhbmdl|NoYW5nZ|jaGFuZ2).*?(?:\]\]>)?<\/''',
      # Various words at the start and end that signify a placeholder

      ## Starts with
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?(?:&lt;|\\u201c|\\u003c|\$)?(?:#!\/|\/etc\/|data\/|\/path\/|(?:\/var)?\/run\/|abc(?:d|12)|ask|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|ENC(?:RYPTED)?[\[\(]|RU5DW|VOQ|FTk|enter_|fake|false|file:|fixme|grub|https?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|provide|path|quickstart|replace|sample|(?:my)?secret|self|ssh|spec\.|str:|(?:my)?te?mp|test|this|update|value|your_).*?(?:\]\]>)?<\/''',
      ## Ends with
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?[^\"\s]+?(\.(?:jpe?g|png|svg|txt|tmpl)|-auth(?:entication)?|-cert(?:ification)?s?|-demo|-encryption|-tls|_id|_private|client|(?:change|fix)me|conf(?:ig(?:uration)?)?|cred(?:ential)?s?|data|default|devel(?:opment)|hash|here|json|key|[_-]pwd|placeholder|principal|raw\(|registry|required|secret(?:s|_v\d)?|string|test|uuid|value|xxxxx|ya?ml)(?:&gt;|\\u003e)?(?:\]\]>)?<\/''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?(?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}(?:\]\]>)?<\/''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)<\s*?\w*?(?:password|secret|token)[\s\w\"\'=]*?>(?:<!\[CDATA\[)?(?:\\u[a-z0-9]{4})+(?:\]\]>)?<\/''',
    ]

[[rules]]
  id = 'rnWF160pWNg'
  # Captures things like normal Generic Secret but handles the case where
  # the value in a yaml file is unquoted
  description = 'Generic Secret'
  path='''\.ya?ml$'''
  regex = '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?([^\"\'\s]+?)\s*?(?:\n|#|$)'''
  entropy = 3.35
  secretGroup = 1
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'password',
    'secret',
    'token',
  ]

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(?:^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(?:cli.+\/command_modules\/(?:[^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
    ]

    stopwords = [
      '/etc/',
      '/run/',
      '/var/',
      '1234',
      'abc123',
      'abcd',
      'admin',
      'ansible',
      'bool:',
      'bucket',
      'change',
      'client',
      'confirm',
      'contrase',
      'credentials',
      'd3faultentry',
      'data/',
      'default',
      'demo',
      'django',
      'enter',
      'everyone',
      'example',
      'fake',
      'hash',
      'here',
      'invalid',
      'java',
      'json',
      'manager',
      'openstack',
      'passw',
      'passp',
      'path',
      'placeholder',
      'principal',
      'private',
      'provide',
      'quickstart',
      'redhat',
      'registry',
      'replace',
      'required',
      'sample',
      'secret',
      'string',
      'test',
      'theblurstoftimes',
      'todo',
      'token',
      'update',
      'uuid',
      'value',
      'xxxxx',
      'your_',
    ]

    regexTarget = 'line'
    regexes = [
      # Things like:
      #   secret: asdfasdfas # nosec
      '''#\s*?nosec(?:\s+|$)''',
      #   secret: asdfasdfas # noqa: E501
      '''#\s*?noqa(?::[\s\w]+)?$''',
      #   secret: asdfasdfas //nolint:gosec
      '''\/\/\s*?nolint:gosec(?:\s+|$)''',
      #   secret: _PLACEHOLDER_
      #   secret: <PLACEHOLDER>
      #   secret: @PLACEHOLDER@
      #   secret: %PLACEHOLDER%
      #   secret: $PLACEHOLDER$
      #   secret: `PLACEHOLDER`
      #   secret: [PLACEHOLDER]
      #   secret: [%PLACEHOLDER%]
      #   secret: $(PLACEHOLDER...
      #   secret: \$(PLACEHOLDER...
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?:_.+?_|<.+?>|@.+?@|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|\\?\$\(.*)\s*?(?:\n|#|$)''',
      #   secret: ALL_UPPER_LETTERS_OR_UNDERSCORES
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?-i)[A-Z_]{5,}?\s*?(?:\n|#|$)''',
      #   secret: {PLACEHOLDER}
      #   secret: %{PLACEHOLDER}
      #   secret: \%{PLACEHOLDER}
      #   secret: ${PLACEHOLDER}
      #   secret: $\{PLACEHOLDER}
      #   secret: \${PLACEHOLDER}
      #   secret: \${PLACEHOLDER}
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?\\?[\$%]?\\?\{.+?\}\s*?(?:\n|#|$)''',
      #   secret: Some...placeholder
      #   secret: Some***placeholder
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:.*?(?:\.\.\.|\*\*\*|xxxxx)\s*?(?:\n|#|$)''',
      #   secret: (optional char)${PLACEHOLDER}(optional text)
      #   secret: (optional char)#{PLACEHOLDER}(optional text)
      #   secret: FOO_BAR=${PLACEHOLDER}(optional text)
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?:(?-i)[A-Z_]{5,})?.?\$\{.{4,}?\}.*?\s*?(?:\n|#|$)''',
      #   secret: SOME_CONSTANT_PREFIX_${PLACEHOLDER}
      #   secret: /SOME/path:${PLACEHOLDER}
      #   secret: /SOME/path:${PLACEHOLDER}${PLACEHOLDER}
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}\s*?(?:\n|#|$)''',
      #   secret: $SOME_ENV_VARIABLE-optional-text
      #   secret: \$SOME_ENV_VARIABLE-optional-text
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?-i)\\?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?\s*(?:\n|#|$)''',
      # Secrets that are allow lower case and optionally contain dashes are most often placeholders
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?-i)[a-z\-]+\s*?(?:\n|#|$)''',
      # Secrets like SOME_PLACEHOLER_P1 or some_sneaky_password01
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?-i)(?:[A-Z0-9]{2,32}_[A-Z0-9_]{2,32}|[a-z0-9]{2,32}_[a-z0-9_]{2,32})\s*?(?:\n|#|$)''',
      # Base64 encoded example, EXAMPLE, change, and 12345
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:.*(?:ZXhhbXBsZ|V4YW1wbG|leGFtcGxl|RVhBTVBMR|VYQU1QTE|FWEFNUExF|cGFzc3dvcm|Bhc3N3b3Jk|wYXNzd29yZ|cmVkaGF0|JlZGhhd|yZWRoYX|MTIzND|EyMzQ1|xMjM0N|Y2hhbmdl|NoYW5nZ|jaGFuZ2).*?(?:\n|#|$)''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?:&lt;|\\u201c|\\u003c|\$)?(?:#!\/|ask|auto|dict|ENC(?:RYPTED)?[\[\(]|RU5DW|VOQ|FTk|false|file:|fixme|grub|https?:\/\/|installation_prefix|libvirt|none|not|self|ssh|spec\.|str:|(?:my)?te?mp|this).*?(?:\n|#|$)''',
      ## Ends with
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:.*?(\.(jpe?g|png|svg|txt|tmpl)|-auth(?:entication)?|-cert(?:ification)?s?|-encryption|-tls|_id|conf(?:ig(?:uration)?)?|cred(?:ential)?s?|data|devel(?:opment)|key|[_-]pwd|raw\(|ya?ml)(?:&gt;|\\u003e)?\s*?(?:\n|#|$)''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\s*?(?:\n|#|$)''',
       # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?\s*?(?:\n|#|$)''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:[\t\x20]+?(?:\\u[a-z0-9]{4})+\s*?(?:\n|#|$)''',
      # Already covered by the Slack Token rule
      '''xox[baprs]-[0-9a-zA-Z-]{10,48}''',
      # Already covered by GitHub rules
      '''\bgh[oupsr]_[0-9A-Za-z]{36}\b''',
      '''\bgithub_pat_\w{82}\b''',
      # Already covered byt GitLab rules
      '''\bglpat-[\w\-]{20}\b''',
      '''\bglptt-[0-9a-f]{40}\b''',
      '''\b(?:glrt-|GR1348941)[\w\-]{20}\b''',
      # Ignore Bitnami Sealed Secrets - This has the potential to cause false
      # negatives but out of all of our data so far I haven't seen one.
      '''\bAg[A-Za-z0-9+\/]{256,}''',
    ]

[[rules]]
  id = 'kX_PwM0MFvE'
  description = 'GitHub Fine-Grained Personal Access Token'
  regex = '''\bgithub_pat_\w{82}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'github_pat_',
  ]

[[rules]]
  id = '3J1l0v_MrA0'
  description = 'GitHub OAuth Access Token'
  regex = '''\bgho_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'gho_',
  ]

[[rules]]
  id = 'gODCNuGzuKQ'
  description = 'GitHub Personal Access Token'
  regex = '''\bghp_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'ghp_',
  ]

[[rules]]
  id = 'ReSYq_S3Ou0'
  description = 'GitHub Refresh Token'
  regex = '''\bghr_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'ghr_',
  ]

[[rules]]
  id = 'YmXj5Lk-jw4'
  description = 'GitHub Server to Server Token'
  regex = '''\bghs_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'ghs_',
  ]

[[rules]]
  id = 'MMuUwURWAhM'
  description = 'GitHub User to Server Token'
  regex = '''\bghu_[0-9A-Za-z]{36}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'ghu_',
  ]

[[rules]]
  id = 'KJX2Vbp6_jY'
  description = 'GitLab Access Token'
  regex = '''\bglpat-[\w\-]{20}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'glpat-',
  ]

[[rules]]
  id = 'IOimnsNGyvw'
  description = 'GitLab Pipeline Trigger Token'
  regex = '''\bglptt-[0-9a-f]{40}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'glptt-',
  ]

[[rules]]
  id = '5eH7BIYmpNo'
  description = 'GitLab Runner Registration Token'
  regex = '''\b(?:glrt-|GR1348941)[\w\-]{20}\b'''
  entropy = 2
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'glrt-',
    'gr1348941',
  ]

[[rules]]
  id = 'HysINeDft8k'
  description = 'Google Cloud Platform API Key'
  regex = '''\bAIza[0-9A-Za-z\\-_]{35}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'aiza',
  ]

[[rules]]
  id = 'F8ySDDFvEPA'
  description = 'Groq API Key'
  regex = '''\bgsk_[A-Za-z0-9]{52}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    # they should all contain this so this helps find it even if it isn't in
    # the regex above
    'wgdyb3fy',
  ]

[[rules]]
  id = '6Tfk9iWtINY'
  description = 'Heroku API Token'
  regex = '''(?i)heroku(?:.{0,20})?\b([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'heroku',
  ]

[[rules]]
  id = '8nWBN4ZoGf8'
  description = 'Htpasswd File'
  path = '''htpasswd[^\/]*?$'''
  regex = '''[^:\s]{1,255}:(\S{1,255})'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 4

  [rules.allowlist]
    paths = [
      # Ignore these file extensions with htpasswd in the name
      '''\.(?:adoc|c|go|json|java|js|html|md|py|rb|sh|ya?ml)(?:\.\w+)*$''',
    ]

    regexTarget = 'line'
    regexes = [
        '''^\s*#''',
    ]

[[rules]]
  id = 'ROB1tToGkqM'
  description = 'Hugging Face API Token'
  regex = '''\bhf_[a-zA-Z]{34}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'hf_',
  ]

[[rules]]
  id = 'vAAom0bPHy8'
  # base64 shifted versions of '"sub":"system:serviceaccount:'
  description = 'Kubernetes System Service Account JWT'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:InN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudD|JzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6|ic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50O)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'inn1yii6inn5c3rlbtpzzxj2awnlywnjb3vudd',
    'jzdwiioijzexn0zw06c2vydmljzwfjy291bnq6',
    'ic3viijoic3lzdgvtonnlcnzpy2vhy2nvdw50o',
  ]

[[rules]]
  id = 'Evwi072oSOU'
  description = 'MailChimp API Key'
  regex = '''\b[0-9a-f]{32}-us[0-9]{1,2}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '-us',
  ]

[[rules]]
  id = '0Fj-HDkaBWM'
  description = 'Mailgun API Key'
  regex = '''(?i)(?:mailgun|mg).{0,20}?\b(key-[0-9a-z]{32})\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'mailgun',
    'key-',
  ]

[[rules]]
  id = 'tBcMT24UjGQ'
  description = 'NPM Access Token'
  regex = '''\bnpm_[A-Za-z0-9]{36}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.35
  keywords = [
    'npm_',
  ]

[[rules]]
  id = 'tSFtnbvWdlk'
  description = 'NPM Registry Auth'
  regex = '''_(?:auth(?:Token)?|password)\s*=\s*(.+)'''
  path = '''(?:^|\/)[^\/]+npmrc$'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.35
  keywords = [
    '_auth',
    '_password',
  ]

  [rules.allowlist]
    regexTarget = 'secret'
    regexes = [
      # Ignore things like _authToken=${NPM_AUTH_TOKEN}
      '''\$\{.+?\}''',
    ]

[[rules]]
  id = 'DaAdIBwZoGE'
  description = 'OpenShift Login Token'
  regex='''\boc\s+login\s+.*?--token\s*=?\s*(sha256~[^<\s]{16,})\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 4.6
  keywords = [
    '--token',
  ]

[[rules]]
  id = 'bYudTkTa56I'
  description = 'Password Hash'
  regex = '''\$y\$[.\/A-Za-z0-9]+\$[.\/A-Za-z0-9]{0,86}\$[.\/A-Za-z0-9]{43}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$y$',
  ]

[[rules]]
  id = 'fqtWnpN0lfA'
  description = 'Password Hash'
  regex = '''\$gy\$[.\/A-Za-z0-9]+\$[.\/A-Za-z0-9]{0,86}\$[.\/A-Za-z0-9]{43}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$gy$',
  ]

[[rules]]
  id = 'MxYvbqkT9IM'
  description = 'Password Hash'
  regex = '''\$7\$[.\/A-Za-z0-9]{11,97}\$[.\/A-Za-z0-9]{43}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$7$',
  ]

[[rules]]
  id = 'RX7HEzTc6dI'
  description = 'Password Hash'
  regex = '''\$2[abxy]\$[0-9]{2}\$[.\/A-Za-z0-9]{53}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$2a$',
    '$2b$',
    '$2x$',
    '$2y$',
  ]

[[rules]]
  id = 'amXYPF5An5s'
  description = 'Password Hash'
  regex = '''\$6\$(?:rounds=[1-9][0-9]+\$)?[^$:\n]{1,16}\$[.\/0-9A-Za-z]{86}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$6$',
  ]

[[rules]]
  id = 'u9MfgjhX7SI'
  description = 'Password Hash'
  regex = '''\$5\$(?:rounds=[1-9][0-9]+\$)?[^$:\n]{1,16}\$[.\/0-9A-Za-z]{43}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$5$',
  ]

[[rules]]
  id = 'iGgJnI-f5Xk'
  description = 'Password Hash'
  regex = '''\$md5(?:,rounds=[1-9][0-9]+)?\$[.\/0-9A-Za-z]{8}\${1,2}[.\/0-9A-Za-z]{22}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$md5',
  ]

[[rules]]
  id = 'AeVJW2sPHGs'
  description = 'Password Hash'
  regex = '''\$1\$[^$:\n]{1,8}\$[.\/0-9A-Za-z]{22}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '$1$',
  ]

[[rules]]
  id = 'LSd2f7avYkQ'
  description = 'OpenAI API Key'
  regex = '''\b(sk-[\w-]{16,}T3BlbkFJ[\w-]{16,})(?:[^\w-]|$)'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    't3blbkfj',
  ]

[[rules]]
  id = 'RVee3wT2Z4I'
  description = 'Base64 Encoded OpenSSH Private Key'
  regex = '''[A-Za-z0-9+\/_\-]*?(?:QkVHSU4gT1BFTlNTSCBQUklW|JFR0lOIE9QRU5TU0ggUFJJV|CRUdJTiBPUEVOU1NIIFBSSV)[A-Za-z0-9+\/_\-\s]{256,}(?:RU5EIE9QRU5TU0ggUFJJV|VORCBPUEVOU1NIIFBSSV|FTkQgT1BFTlNTSCBQUklW)[A-Za-z0-9+\/_\-\s]*={0,3}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'qkvhsu4gt1bftlntscbquklw',
    'jfr0loie9qru5tu0ggufjjv',
    'crudjtibpuevou1niifbssv',
    'ru5eie9qru5tu0ggufjjv',
    'vorcbpuevou1niifbssv',
    'ftkqgt1bftlntscbquklw',
  ]

  [rules.allowlist]
    stopwords = [
      # Base64 shifted versions of: example
      'zxhhbxbsz',
      'v4yw1wbg',
      'legftcgxl',
      # Base64 shifted versions of: EXAMPLE
      'rvhbtvbmr',
      'vyqu1qte',
      'fwefnuexf',
    ]

[[rules]]
  id = 'NSjjvv0VeYg'
  description = 'PayPal Braintree Access Token'
  regex = '''access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'access_token$production$',
  ]

[[rules]]
  id = 'K3ZNQj2_kTE'
  description = 'Picatic API Key'
  regex = '''\bsk_live_[0-9a-z]{32}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'sk_live_',
  ]

[[rules]]
  id = 'RA8jFaMQxIg'
  description = 'PKCS #12 File'
  path = '''(?:^|\/)[^\/]+\.p12$'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  id = 'ePK9whPQPpY'
  description = 'Private Key'
  regex = '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\s\S]*?(?:[a-z0-9\/+]{64}[\s\S]*?){2}-----END[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
      '-----begin',
  ]

  [rules.allowlist]
    stopwords = [
      '...',
      '***',
      'snip',
      'xxx',
    ]

    paths = [
      # Test data are often false positives
      '''(?:^|\/)testdata\/''',
      # Ignore keys in a test(s) folder
      '''tests?\/.*.(?:txt|der|key|pem)$''',
      # Ignore keys with test in their name
      '''[^\/]+test[^\/]+(?:txt|der|key|pem)$''',
      # Ignore common example keys
      '''(?:dummy|example).*(?:key|pem)''',
      # Ignore ssh utilities that might have key headers in them
      '''\/s?bin\/ssh(?:-add|-agent|-autoproxy|-copy-id|-keygen|-keyscan|-sign-request|d)?$''',
      # Ignore libs that might have key headers in them
      '''\/lib\w+\/lib(?:gnutls|ssh).so''',
      # Ignore utils that might have key headers in them
      '''\/lib\w+\/(?:cockpit-|openssh\/ssh-)''',
      # Data dirs that contain key headers to identify them
      '''\/usr\/share\/(?:mime|misc)''',
      # OpenJDK tests with private keys
      '''(?:^|\/)test\/jdk\/sun\/security\/ssl\/''',
    ]

    regexTarget = "line"
    regexes = [
      # Ignore example keys
      '''(?i)-----BEGIN (?:DUMMY|EXAMPLE|FAKE|TEST) PRIVATE KEY(?: BLOCK)?-----''',
      # Ignore some keys assigned to test vars
      # e.g. TEST_SERVER_KEY = """-----BEGIN RSA PRIVATE KEY-----
      '''(?i)\w*(?:dummy|example|fake|test)\w*\s*[:=]+\s*(?:\[)?\s*(?:\"\"\"|\"|\'|`)?-----BEGIN''',
      # Things that look like code looking for headers
      #   like: if (privateKey === "-----BEGIN RSA PRIVATE KEY-----") {
      '''if.*==\s*?[\"|\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\"|\']''',
      #   like: ("-----BEGIN RSA PRIVATE KEY-----")
      '''\([\"\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----(\\n)?[\"\']''',
      #  things ending with stuff like # noqa: E501
      '''#\s*?noqa(?::[\s\w]+)?$''',
    ]

[[rules]]
  id = 'ZeqrEVYyN7A'
  description = 'PyPI Upload Token'
  regex = '''pypi-AgEIcHlwaS5vcmc[A-Za-z0-9-_]{50,1000}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'pypi-ageichlwas5vcmc',
  ]

[[rules]]
  id = 'fJqKYcYx3bk'
  description = 'SendGrid API Key'
  regex = '''\bSG\.[\w\-]{16,32}\.[\w\-]{16,64}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'sg.',
  ]

[[rules]]
  id = 'Rn1i7_84x3E'
  description = 'Shopify Access Token'
  regex = '''\bshpat_[a-fA-F0-9]{32}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'shpat_',
  ]

[[rules]]
  id = '2yT2HilWNWU'
  description = 'Shopify Custom App Access Token'
  regex = '''\bshpca_[a-fA-F0-9]{32}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'shpca_',
  ]

[[rules]]
  id = 'Q3_9607B5YA'
  description = 'Shopify Private App Access Token'
  regex = '''\bshppa_[a-fA-F0-9]{32}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'shppa_',
  ]

[[rules]]
  id = 'xgtaj9NNvtQ'
  description = 'Shopify Shared Secret'
  regex = '''\bshpss_[a-fA-F0-9]{32}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'shpss_',
  ]

[[rules]]
  id = 'PdsUpd2VsLw'
  description = 'Slack App Token'
  regex = '''(?i)\bxapp-\d-[a-z0-9]+-\d+-[a-z0-9]+\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xapp-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = 'AHqBipAQalU'
  description = 'Slack Bot Token'
  regex = '''(?i)\bxoxb-[0-9]{10,13}\-[0-9]{10,13}[a-z0-9-]*\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xoxb-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = 'ADpHU5Pfr_w'
  description = 'Slack Config Access Token'
  regex = '''(?i)\bxoxe.xox[bp]-\d-[a-z0-9]{163,166}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xoxe.xoxb-',
    'xoxe.xoxp-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = 'VitPJ4tk46E'
  description = 'Slack Config Refresh Token'
  regex = '''(?i)\bxoxe-\d-[a-z0-9]{146}\bj'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xoxe-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = 'qWJ75vwX7O8'
  description = 'Slack Legacy Bot Token'
  regex = '''(?i)\bxoxb-[0-9]{8,14}\-[a-z0-9]{18,26}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xoxb-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = 'L7sVfqv1KDs'
  description = 'Slack Legacy Token'
  regex = '''(?i)\bxox[os]-\d+-\d+-\d+-[a-f\d]+\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xoxo-',
    'xoxs-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = 'Yjg2P_IaYK8'
  description = 'Slack Legacy Workspace Token'
  regex = '''(?i)\bxox[ar]-(?:\d-)?[0-9a-z]{8,48}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xoxa-',
    'xoxr-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = '6mKbEmEYQDY'
  description = 'Slack User Token'
  regex = '''(?i)\bxox[pe](?:-[0-9]{10,13}){3}-[a-z0-9-]{28,34}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 3.2
  keywords = [
    'xoxp-',
    'xoxe-',
  ]

  [rules.allowlist]
    stopwords = [
      '1234',
      'some',
      'placeholder',
      'slack',
    ]

[[rules]]
  id = 'CPcj1txuB2g'
  description = 'Slack Webhook URL'
  regex = '''(?:https?:\/\/)?hooks.slack.com\/(?:services|workflows)\/[A-Za-z0-9+\/]{43,46}'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 4.75
  keywords = [
    'hooks.slack.com',
  ]

[[rules]]
  id = 'pcwMvzsYJ5U'
  description = 'Snowflake OAuth Token'
  # Based on shifted b64 encoded portions any of:
  # - session:role-any
  # - session:role:
  # - "aud":"snowflake
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:c2Vzc2lvbjpyb2xlLWFue|Nlc3Npb246cm9sZS1hbn|zZXNzaW9uOnJvbGUtYW55|c2Vzc2lvbjpyb2xlO|Nlc3Npb246cm9sZT|zZXNzaW9uOnJvbGU6|ImF1ZCI6InNub3dmbGFrZS|JhdWQiOiJzbm93Zmxha2Ug|iYXVkIjoic25vd2ZsYWtlI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'c2vzc2lvbjpyb2xllwfue',
    'nlc3npb246cm9szs1hbn',
    'zzxnzaw9uonjvbgutyw55',
    'c2vzc2lvbjpyb2xlo',
    'nlc3npb246cm9szt',
    'zzxnzaw9uonjvbgu6',
    'imf1zci6innub3dmbgfrzs',
    'jhdwqioijzbm93zmxha2ug',
    'iyxvkijoic25vd2zsywtli',
  ]

[[rules]]
  id = 'FrTqjJHAoEY'
  description = 'StackRox JWT'
  # Based on shifted b64 encoded portions of '"iss":"https://stackrox.io/jwt"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:ImlzcyI6Imh0dHBzOi8vc3RhY2tyb3guaW8vand0I|Jpc3MiOiJodHRwczovL3N0YWNrcm94LmlvL2p3dC|iaXNzIjoiaHR0cHM6Ly9zdGFja3JveC5pby9qd3Qi)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'imlzcyi6imh0dhbzoi8vc3rhy2tyb3guaw8vand0i',
    'jpc3mioijodhrwczovl3n0ywnrcm94lmlvl2p3dc',
    'iaxnzijoiahr0chm6ly9zdgfja3jvec5pby9qd3qi',
  ]

[[rules]]
  id = 'fZHzd4gAHrs'
  description = 'Square Access Token'
  regex = '''\bsq0atp-[0-9A-Za-z\-_]{22}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'sq0atp-',
  ]

[[rules]]
  id = 'YX55Boo0gwk'
  description = 'Square OAuth Secret'
  regex = '''\bsq0csp-[0-9A-Za-z\\-_]{43}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'sq0csp-',
  ]

[[rules]]
  id = 'CSHGj8J1lUs'
  description = 'Stripe API Key'
  regex = '''(?i)\b[sr]k_live_[0-9a-zA-Z]{24}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'k_live_',
  ]

[[rules]]
  id = 'lSFsU9hapFQ'
  description = 'Testing Farm API Token'
  regex = '''\bTESTING_FARM_API_TOKEN=[\"\']?([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'testing_farm_api_token',
  ]

[[rules]]
  id = 'TiwMt5e05g4'
  description = 'Tines Webhook'
  regex = '''(?i)(?:https:\/\/)?[\w\-]+\.tines\.com\/webhook\/[a-z0-9]{32}\/[a-z0-9]{32}'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    '.tines.com/webhook/',
  ]

[[rules]]
  id = 'hRAjGfP0Zao'
  description = 'Twilio API Key'
  regex = '''\bSK(?i)[0-9a-f]{32}\b'''
  tags = ['type:secret', 'alert:repo-owner']
  keywords = [
    'sk',
  ]

[[rules]]
  id = 'NoSStdj9pfY'
  description = 'URL User and Password'
  regex = '''[\w\+]*?:\/\/[^:\/\s\"\']*?:([^@\/\s\"]{3,})@[\w\.\-]+'''
  tags = ['type:secret', 'alert:repo-owner']
  entropy = 2.4
  secretGroup = 1
  keywords = [
    '://',
  ]

  [rules.allowlist]
    paths = [
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(?:cli.+\/command_modules\/(?:[^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
    ]

    stopwords = [
      '1234',
      'abc123',
      'abcd',
      'admin',
      'ansible',
      'bool:',
      'candlepin',
      'change',
      'client',
      'confirm',
      'contrase',
      'data',
      'default',
      'demo',
      'fake',
      'gitops',
      'keylime',
      'oauth-basic',
      'openshift',
      'openstack',
      'passw',
      'passp',
      'pbench',
      'placeholder',
      'postgres',
      'prisma',
      'provide',
      'rabbitmq',
      'redhat',
      'replace',
      'sample',
      'secret',
      'telemetry',
      'token',
      'update',
      'userpass',
      'value',
    ]

    regexTarget = 'line'
    regexes = [
      # Things like: https://user:__pass__@host
      # Things like: https://user:%pass%@host
      # Things like: https://user:<pass>@host
      # Things like: https://user:[pass]@host
      ''':\/\/[^:\/\s\"\']*?:(?:\[[^@\/\s\"]+\]|__[^@\/\s\"]+__|%[^@\/\s\"]+% |\[?_?<[^@\/\s\"]+>_?\]?)@[\w\.\-]+''',
      # Things like: https://user:&lt;pass&gt;@host (HTML for <pass>)
      ''':\/\/[^:\/\s\"\']*?:&lt;[^@\/\s\"]+&gt;@[\w\.\-]+''',
      # Things like: https://user:$pass$@host
      # Things like: https://user:$pass@host
      '''(?i):\/\/[^:\/\s\"\']*?:\$[a-z][a-z\_\-]+\$?@[\w\.\-]+''',
      # Things like: https://user:afacae....adsfae@host
      ''':\/\/[^:\/\s\"\']*?:[^@\/\s\"]*(?:\.\.\.|\*\*\*|xxxxx)[^@\/\s\"]*@[\w\.\-]+''',
      # Things like: https://user:${pass}@host
      # Things like: https://user:\${pass}@host
      # Things like: https://user:{pass}@host
      # Things like: https://user:#{pass}@host
      # Things like: https://user:$(pass)@host
       ''':\/\/[^:\/\s\"\']*?:\"?(?:\\?\$|#)?(?:\([^@\/\s\"]+\)|{[^@\/\s\"]+\})\"?@[\w\.\-]+''',
      # Things like: https://user:$SOME_ENV_VARIABLE-optional-text@host
      ''':\/\/[^:\/\s\"\']*?:\"?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?\"?@[\w\.\-]+''',
      # Things like: https://host:port,org.java.stuff@commit
      ''':\/\/[^:\/\s\"\']*?:\d{3,4},[\w\.]+@[\w\.\-]+''',
      # Hostnaames to ignore (most hostnames that are just a-z are FPs and there\s example hosts and such)
      ''':\/\/(?:[^:\/\s\"\']+)?:(?:[^@\/\s\"]{3,})@(?:[a-z]+|127\.0.\0\.1|[\w\.\-]*?examples?(?:\.com|\.net)?)(?:[^\w\.\-]|$)''',
      # ip:port type placeholders
      ''':\/\/[^:\/\s\"\']*?:[^@\/\s\"]{3,}@(?:ip|host):port''',
      # Is regex
      '''re\.compile\(\s*?r?[\'\"]''',
    ]


[[rules]]
  id = 'FxXgdaIgf7Y'
  description = 'WP-Config'
  regex = '''define\s*?\(\s*?[\"\'](?:DB_HOST|DB_NAME|DB_USER|DB_PASSWORD|AUTH_KEY|SECURE_AUTH_KEY|LOGGED_IN_KEY|NONCE_KEY|AUTH_SALT|SECURE_AUTH_SALT|LOGGED_IN_SALT|NONCE_SALT)[\"\']\s*?,\s*?[\"\'](.+?)[\"\']\s*?\)'''
  tags = ['type:secret', 'alert:repo-owner']
  secretGroup = 1
  keywords = [
    'define',
  ]

  [rules.allowlist]
    stopwords = [
      'auth',
      'example',
      'insert',
      'localhost',
      'passw',
      'passp',
      'place',
      'required',
      'secret',
    ]

    regexes = [
      # Things like:
      #   define('AUTH_KEY', '${AUTH_KEY}')
      #   define('AUTH_KEY', '$AUTH_KEY')
      #   define('AUTH_KEY', '{{AUTH_KEY}}')
      #   define('AUTH_KEY', '<AUTH_KEY>')
      '''^(?:<.+?>|\{\{.+?\}\}|\$\{.+?\}|\$\w+)$''',
    ]
