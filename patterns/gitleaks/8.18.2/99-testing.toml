# Testing Patterns
#
# These patterns are the lowest presidence (i.e. 99-) because they could
# collide with other production patterns. Since secret leak uniquness is
# currently being determined by line (combined with some other attrs), these
# collisions were causing things to be missed. Putting them at the end should
# resolve that.
#
# The Structure of This File
#
# This file is broken into multiple sections. Each section starts with # [file:
# and the filename that the patterns in that section will go into once
# production ready.
#
# Tags
#
# All rules in this should have the group:leaktk-testing tag set and no alert:*
# tags set in addition to the other tags called out by the README.
#
# Promoting to Production
#
# The test patterns are deployed to the pattern server just like the other
# patterns. The leaktk-testing group and lack of alert tags put them in a sort
# of "test mode". The general process for making them production ready is:
#
# 1 Deploy the patterns
# 2 Wait 30 days
# 3 Review the scanner results during the monthly tuning
# 4 Tune the patterns
# 5 If there were too many false positives in the last 30 days, repeat 1-5
# 6 Move the test patterns to the file called out by their section
# 7 Remove the group:leatk-testing tag and add the appropriate alert tags
# 8 Repeat
#
# Note About Moving Patterns
#
# Try to keep patterns roughly alphabetically and/or grouped together. Or rather
# don't spread related patterns out. Spreading them out makes it harder to
# notice when changes need to be made in multiple places with related patterns.
#

# [file:98-general.toml]

[[rules]]
  id = '89a8be38a22feb55f458df682131f7d028c0f48885e8496f74cb3621337200b9'
  # Captures things like normal General Secret but handles the case where
  # the value is unquoted and in the format secret=value and has nothing
  # infront of it other than spaces or starts the line or is a comment
  description = '(Env Var) General Secret'
  regex = '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=([^\s\"\']{6,})'''
  entropy = 3.35
  secretGroup = 1
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'password',
    'secret',
    'token',
  ]

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(?:^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(?:cli.+\/command_modules\/(?:[^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
      # Ignore OpenAPI spec files
      '''(?:^|\/)openapi\.json$''',
      '''(?i)openapi.*github[^\/]*\.json$''',
    ]

    stopwords = [
      '/etc/',
      '/run/',
      '/var/',
      '1234',
      'abc123',
      'abcd',
      'admin',
      'ansible',
      'bool:',
      'change',
      'client',
      'confirm',
      'contrase',
      'credentials',
      'd3faultentry',
      'data/',
      'default',
      'demo',
      'django',
      'enter',
      'everyone',
      'example',
      'fake',
      'hash',
      'here',
      'invalid',
      'json',
      'openstack',
      'passw0rd',
      'passwd',
      'password',
      'path',
      'placeholder',
      'principal',
      'private',
      'provide',
      'quickstart',
      'redhat',
      'registry',
      'replace',
      'required',
      'sample',
      'secret',
      'string',
      'test',
      'theblurstoftimes',
      'token',
      'update',
      'uuid',
      'value',
      'xxxxx',
      'your_',
    ]

    regexTarget = 'line'
    regexes = [
      # Things like:
      #   secret=asdfasdfas # nosec
      '''#\s*?nosec(?:\s+|$)''',
      #   secret=asdfasdfas # noqa: E501
      '''#\s*?noqa(?::[\s\w]+)?$''',
      #   secret = "asdfasdfas" //nolint:gosec
      '''\/\/\s*?nolint:gosec(?:\s+|$)''',
      #   secret=_PLACEHOLDER_
      #   secret=<PLACEHOLDER>
      #   secret=@PLACEHOLDER@
      #   secret=%PLACEHOLDER%
      #   secret=$PLACEHOLDER$
      #   secret=`PLACEHOLDER`
      #   secret=[PLACEHOLDER]
      #   secret=[%PLACEHOLDER%]
      #   secret=$(PLACEHOLDER...
      #   secret=\$(PLACEHOLDER...
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?:_.+?_|<.+?>|@.+?@|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|\\?\$\(.*)(?:\s|$)''',
      #   secret=ALL_UPPER_LETTERS_OR_UNDERSCORES
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?-i)[A-Z_]{5,}?(?:\s|$)''',
      #   secret={PLACEHOLDER}
      #   secret=%{PLACEHOLDER}
      #   secret=\%{PLACEHOLDER}
      #   secret=${PLACEHOLDER}
      #   secret=$\{PLACEHOLDER}
      #   secret=\${PLACEHOLDER}
      #   secret=#{PLACEHOLDER}
      #   secret=\#{PLACEHOLDER}
      #   secret=\${PLACEHOLDER}
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=\\?[\$%#]?\\?\{.+?\}(?:\s|$)''',
      #   secret=Some...placeholder
      #   secret=Some***placeholder
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=.*?(?:\.\.\.|\*\*\*|xxxxx).*?(?:\s|$)''',
      '''(?i)(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   secret(optional char)${PLACEHOLDER}(optional text)
      #   secret(optional char)#{PLACEHOLDER}(optional text)
      #   secretFOO_BAR=($|#){PLACEHOLDER}(optional text)
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?:(?-i)[A-Z_]{5,})?.?[\$#]\{.{8,}?\}.*?(?:\s|$)''',
      #   secret=SOME_CONSTANT_PREFIX_${PLACEHOLDER}
      #   secret=/SOME/path:${PLACEHOLDER}
      #   secret=/SOME/path:${PLACEHOLDER}${PLACEHOLDER}
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}(?:\s|$)''',
      #   secret=$SOME_ENV_VARIABLE-optional-text
      #   secret=\$SOME_ENV_VARIABLE-optional-text
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?-i)\\?\$[A-Z][0-9A-Z_]{8,}.*?(?:\s|$)''',
      # Secrets that are allow lower case and optionally contain dashes are most often placeholders
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?-i)[a-z\-]+(?:\s|$)''',
      # Base64 encoded EXAMPLE in the text
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=.*?(?:RVhBTVBMR|VYQU1QTE|FWEFNUExF).*?(?:\s|$)''',
      # aws.* is already covered by a different rule
      '''(?i)aws(.{0,15})(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?:&lt;|\\u201c|\\u003c|\$)?(?:#!\/|ask|auto|dict|ENC\[|RU5DW|VOQ|FTk|false|file:|fixme|grub|https?:\/\/|installation_prefix|libvirt|none|not|self|ssh|spec\.|str:|(my)?t(e)?mp|this).*?(?:\s|$)''',
      ## Ends with
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=.*?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-encryption|-tls|_id|conf(ig(uration)?)?|cred(ential)?(s)?|data|devel(opment)|key|(_|-)pwd|raw\(|ya?ml)(?:&gt;|\\u003e|&#34;)?(?:\s|$)''',
       # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?(?:\s|$)''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?=(?:\\u[a-z0-9]{4})+(?:\s|$)''',
      # Already covered by the Slack Token rule
      '''xox[baprs]-[0-9a-zA-Z-]{10,48}''',
      # Already covered by GitHub rules
      '''\bgh[oupsr]_[0-9A-Za-z]{36}\b''',
      '''\bgithub_pat_\w{82}\b''',
      # Already covered byt GitLab rules
      '''\bglpat-[\w\-]{20}\b''',
      '''\bglptt-[0-9a-f]{40}\b''',
      '''\b(?:glrt-|GR1348941)[\w\-]{20}\b''',
      # Already covered in the testing farm rule
      '''TESTING_FARM_API_TOKEN''',
      # Already covered by the Mailgun rule
      '''(?i)(?:mailgun|mg).{0,20}?\b(key-[0-9a-z]{32})\b''',
    ]

[[rules]]
  id = 'd4d9fc7b1e757e23c3bee62914079b1e1df294fafa025814db41be41d3312520'
  description = 'StackRox JWT'
  # Based on shifted b64 encoded portions of '"iss":"https://stackrox.io/jwt"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:ImlzcyI6Imh0dHBzOi8vc3RhY2tyb3guaW8vand0I|Jpc3MiOiJodHRwczovL3N0YWNrcm94LmlvL2p3dC|iaXNzIjoiaHR0cHM6Ly9zdGFja3JveC5pby9qd3Qi)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'imlzcyi6imh0dhbzoi8vc3rhy2tyb3guaw8vand0i',
    'jpc3mioijodhrwczovl3n0ywnrcm94lmlvl2p3dc',
    'iaxnzijoiahr0chm6ly9zdgfja3jvec5pby9qd3qi',
  ]

[[rules]]
  id = 'a4618135ef6270cf16be1c2aca72038a86e781645fa2df8e4d8165848bb7e943'
  description = 'HashiCorp Vault AppRole SecretID'
  regex = '''vault[\s\S]{0,128}secret_id[\'\"]?\s*[:=]\s*[\'\"]?([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\b'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'secret_id',
  ]

[[rules]]
  id = 'd6cdf13aa9b7b02a7f259b6f116bcbe24e4a30a01f566a418211c6e02e39fd79'
  description = 'Auth0 OAuth Client Secret'
  regex = '''(?i)auth0[\s\S]{0,128}client_?secret[\"\']?\s*\]?\s*[:=]\s*[\"\']?([a-zA-Z0-9_-]{64,})[\"\']?'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'client_secret',
    'clientsecret',
  ]

# This rule WAY WAY overmatches at the moment and can cause the scanner to
# time out on large json files.
#
# TODO: fix the scoping
#
# [[rules]]
#   id = '0c46f7bbe4578544244b854d1329cb4fc181f42be956fd47397ae7b13b5490fe'
#   description = 'Google Cloud Platform Service Account Credentials'
#   # Should work multi line and require that at least 8 of the fields match
#   # We may need to put allowlist items with regexTarget = 'match' for ignoring
#   # example data. NOTE: This also currently doesn't handle any extra fields
#   # added in the json. Also it supports random fields on either side of the
#   # expected fields, but NOT mixed in the middle.
#   regex = '''\{[\s\S]*?(?:\"(?:type|project_id|private_key_id|private_key|client_email|client_id|auth_uri|token_uri|auth_provider_x509_cert_url|client_x509_cert_url|universe_domain)\"\s*:\s*\".+?",?\s*){8,}[\s\S]*?\}'''
#   tags = ['type:secret', 'group:leaktk-testing']
#   keywords = [
#     '"type"',
#     '"project_id"',
#     '"private_key_id"',
#     '"private_key"',
#     '"client_email"',
#     '"client_id"',
#     '"auth_uri"',
#     '"token_uri"',
#     '"auth_provider_x509_cert_url"',
#     '"client_x509_cert_url"',
#     '"universe_domain"',
#   ]
