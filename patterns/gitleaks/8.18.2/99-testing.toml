# Testing Patterns
#
# These patterns are the lowest presidence (i.e. 99-) because they could
# collide with other production patterns. Since secret leak uniquness is
# currently being determined by line (combined with some other attrs), these
# collisions were causing things to be missed. Putting them at the end should
# resolve that.
#
# The Structure of This File
#
# This file is broken into multiple sections. Each section starts with # [file:
# and the filename that the patterns in that section will go into once
# production ready.
#
# Tags
#
# All rules in this should have the group:leaktk-testing tag set and no alert:*
# tags set in addition to the other tags called out by the README.
#
# Promoting to Production
#
# The test patterns are deployed to the pattern server just like the other
# patterns. The leaktk-testing group and lack of alert tags put them in a sort
# of "test mode". The general process for making them production ready is:
#
# 1 Deploy the patterns
# 2 Wait 30 days
# 3 Review the scanner results during the monthly tuning
# 4 Tune the patterns
# 5 If there were too many false positives in the last 30 days, repeat 1-5
# 6 Move the test patterns to the file called out by their section
# 7 Remove the group:leatk-testing tag and add the appropriate alert tags
# 8 Repeat
#
# Note About Moving Patterns
#
# Try to keep patterns roughly alphabetically and/or grouped together. Or rather
# don't spread related patterns out. Spreading them out makes it harder to
# notice when changes need to be made in multiple places with related patterns.
#

# [file:98-general.toml]

[[rules]]
  id = 'hG-qMjbXGro'
  # Captures things like normal Generic Secret but handles the case where
  # the value is unquoted and in the format secret=value and has nothing
  # infront of it other than spaces or starts the line or is a comment
  description = '(Env Var) Generic Secret'
  regex = '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=([^\s\"\']{6,})'''
  entropy = 3.35
  secretGroup = 1
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'password',
    'secret',
    'token',
  ]

  [rules.allowlist]
    stopwords = [
      # pragma: include "common_stopwords"
    ]

    paths = [
      # Test data are often false positives
      '''(?:^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(?:cli.+\/command_modules\/(?:[^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
      # Ignore OpenAPI spec files
      '''(?:^|\/)openapi\.json$''',
      '''(?i)openapi.*github[^\/]*\.json$''',
    ]

    regexTarget = 'line'
    regexes = [
      # Things like:
      #   secret=asdfasdfas # nosec
      '''#\s*?nosec(?:\s+|$)''',
      #   secret=asdfasdfas # noqa: E501
      '''#\s*?noqa(?::[\s\w]+)?$''',
      #   secret = "asdfasdfas" //nolint:gosec
      '''\/\/\s*?nolint:gosec(?:\s+|$)''',
      #   secret=_PLACEHOLDER_
      #   secret=<PLACEHOLDER>
      #   secret=@PLACEHOLDER@
      #   secret=%PLACEHOLDER%
      #   secret=$PLACEHOLDER$
      #   secret=`PLACEHOLDER`
      #   secret=[PLACEHOLDER]
      #   secret=[%PLACEHOLDER%]
      #   secret=$(PLACEHOLDER...
      #   secret=\$(PLACEHOLDER...
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?:_.+?_|<.+?>|@.+?@|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|\\?\$\(.*)(?:\s|$)''',
      #   secret=ALL_UPPER_LETTERS_OR_UNDERSCORES
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)[A-Z_]{5,}?(?:\s|$)''',
      #   secret={PLACEHOLDER}
      #   secret=%{PLACEHOLDER}
      #   secret=\%{PLACEHOLDER}
      #   secret=${PLACEHOLDER}
      #   secret=$\{PLACEHOLDER}
      #   secret=\${PLACEHOLDER}
      #   secret=#{PLACEHOLDER}
      #   secret=\#{PLACEHOLDER}
      #   secret=\${PLACEHOLDER}
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=\\?[\$%#]?\\?\{.+?\}(?:\s|$)''',
      '''(?i)(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   secret(optional char)${PLACEHOLDER}(optional text)
      #   secret(optional char)#{PLACEHOLDER}(optional text)
      #   secretFOO_BAR=($|#){PLACEHOLDER}(optional text)
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?:(?-i)[A-Z_]{5,})?.?[\$#]\{.{8,}?\}.*?(?:\s|$)''',
      #   secret=SOME_CONSTANT_PREFIX_${PLACEHOLDER}
      #   secret=/SOME/path:${PLACEHOLDER}
      #   secret=/SOME/path:${PLACEHOLDER}${PLACEHOLDER}
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}(?:\s|$)''',
      #   secret=$SOME_ENV_VARIABLE-optional-text
      #   secret=\$SOME_ENV_VARIABLE-optional-text
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)\\?\$[A-Z][0-9A-Z_]{8,}.*?(?:\s|$)''',
      # Things like secret=asdfsadfsfsafd, bar=asdfsadfsdf, ...
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=([^\s\"\']{6,}),\s''',
      # Secrets that are often code or placeholders
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)(?:[a-z\.\_\(\,\[]{0,32}|[A-Z\.\_\(\,\[]{0,32})(?:\s|$)''',
      # Things like foo-bar-baz os.environ["asdfasdf"] etc
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)(?:[A-Z0-9]{2,16}[_\.][A-Z0-9_\.]{2,32}|[a-z0-9]{2,16}[_\.][a-z0-9_\.])''',
      # Base64 encoded example, EXAMPLE in the text
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=.*?(?:ZXhhbXBsZ|V4YW1wbG|leGFtcGxl|RVhBTVBMR|VYQU1QTE|FWEFNUExF).*?(?:\s|$)''',
      # aws.* is already covered by a different rule
      '''(?i)aws.{0,15}(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?:&lt;|\\u201c|\\u003c|\$)?(?:#!\/|ask|auto|dict|ENC(?:RYPTED)?[\[\(]|RU5DW|VOQ|FTk|false|file:|fixme|grub|https?:\/\/|installation_prefix|libvirt|none|not|self|ssh|spec\.|str:|(?:my)?te?mp|this).*?(?:\s|$)''',
      ## Ends with
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=.*?(\.(jpe?g|png|svg|txt|tmpl)|-auth(?:entication)?|-cert(?:ification)?s?|-encryption|-tls|_id|conf(?:ig(?:uration)?)?|cred(?:ential)?s?|data|devel(?:opment)|key|[_-]pwd|raw\(|ya?ml)(?:&gt;|\\u003e|&#34;)?(?:\s|$)''',
       # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?(?:\s|$)''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)(?:^|\n)[#\s]*?\w*?(?:(?:password|secret|token)_?(?:access_?)?(?:key)?|api_?key)=(?:\\u[a-z0-9]{4})+(?:\s|$)''',
      # Already covered by the Slack Token rule
      '''xox[baprs]-[0-9a-zA-Z-]{10,48}''',
      # Already covered by GitHub rules
      '''\bgh[oupsr]_[0-9A-Za-z]{36}\b''',
      '''\bgithub_pat_\w{82}\b''',
      # Already covered byt GitLab rules
      '''\bglpat-[\w\-]{20}\b''',
      '''\bglptt-[0-9a-f]{40}\b''',
      '''\b(?:glrt-|GR1348941)[\w\-]{20}\b''',
      # Already covered in the testing farm rule
      '''TESTING_FARM_API_TOKEN''',
      # Already covered by the Mailgun rule
      '''(?i)(?:mailgun|mg).{0,20}?\bkey-[0-9a-z]{32}\b''',
    ]

[[rules]]
  id = 'rZUmm0ozLWQ'
  description = 'HashiCorp Vault AppRole SecretID'
  regex = '''vault[\s\S]{0,128}secret_id[\'\"]?\s*[:=]\s*[\'\"]?([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\b'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'secret_id',
  ]

[[rules]]
  id = '-bDTAD8YMJg'
  description = 'Auth0 OAuth Client Secret'
  regex = '''(?i)auth0[\s\S]{0,128}client_?secret[\"\']?\s*\]?\s*[:=]\s*[\"\']?([a-zA-Z0-9_-]{64,})[\"\']?'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'client_secret',
    'clientsecret',
  ]

[[rules]]
  id = 'o3-Wm5oL1D4'
  description = 'Auth0 JWT'
  # Based on base64 shifted segments of: ".auth0.com/",
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:LmF1dGgwLmNvbS8iL|5hdXRoMC5jb20vIi|uYXV0aDAuY29tLyIs)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'lmf1dggwlmnvbs8il',
    '5hdxromc5jb20vii',
    'uyxv0adauy29tlyis',
  ]

[[rules]]
  id = 'qUN8svLm9sk'
  description = 'Dropbox Refresh Token'
  regex = '''(?:[^A-Za-z0-9]|\A)([A-Za-z0-9]{11}AAAAAAAAAA[A-Za-z0-9\-_=]{43})(?:[^A-Za-z0-9\-=_]|$)'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'dropbox',
  ]

[[rules]]
  id = 'tvqG--ROt7U'
  description = 'Dropbox Short-Lived Offline Access Token'
  regex = '''(?i)(?:[^a-z0-9\-=_]|\A)(sl\.u.[a-z0-9\-=_]{136})(?:[^a-z0-9\-=_]|$)'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'sl.u.',
  ]

[[rules]]
  id = 'vtSSaD-DcYo'
  description = 'Dropbox Short-Lived Access Token'
  regex = '''(?i)(?:[^a-z0-9\-=_]|\A)(sl\.[a-z0-9\-=_]{136})(?:[^a-z0-9\-=_]|$)'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'sl.',
  ]

# This rule WAY WAY overmatches at the moment and can cause the scanner to
# time out on large json files.
#
# TODO: fix the scoping
#
# [[rules]]
#   id = 'lgA0jzBEvQo'
#   description = 'Google Cloud Platform Service Account Credentials'
#   # Should work multi line and require that at least 8 of the fields match
#   # We may need to put allowlist items with regexTarget = 'match' for ignoring
#   # example data. NOTE: This also currently doesn't handle any extra fields
#   # added in the json. Also it supports random fields on either side of the
#   # expected fields, but NOT mixed in the middle.
#   regex = '''\{[\s\S]*?(?:\"(?:type|project_id|private_key_id|private_key|client_email|client_id|auth_uri|token_uri|auth_provider_x509_cert_url|client_x509_cert_url|universe_domain)\"\s*:\s*\".+?",?\s*){8,}[\s\S]*?\}'''
#   tags = ['type:secret', 'group:leaktk-testing']
#   keywords = [
#     '"type"',
#     '"project_id"',
#     '"private_key_id"',
#     '"private_key"',
#     '"client_email"',
#     '"client_id"',
#     '"auth_uri"',
#     '"token_uri"',
#     '"auth_provider_x509_cert_url"',
#     '"client_x509_cert_url"',
#     '"universe_domain"',
#   ]

[[rules]]
  id = 'QqS4RvI6Zmg'
  description = 'Authorization Header'
  regex = '''(?:\A|[^\w-])Authorization:[\t\x20]*(?:\w+[\t\x20]+)?([^\s\"\'<]{18,})'''
  tags = ['type:secret', 'group:leaktk-testing']
  entropy = 3.35
  secretGroup = 1
  keywords = [
    'authorization',
  ]

  [rules.allowlist]
    stopwords = [
      'auth',
      'bearer',
      'credential',
      'header',
      'insert',
      'name',
      'passp',
      'passw',
      'placeholder',
      'replace',
      'service',
      'token',
      'user',
    ]

    paths = [
      # pragma: include "doc_file_paths"
    ]

    regexTarget = "line"
    regexes = [
      # Vars for the values
      '''(?:\A|[^\w-])Authorization:[\t\x20]*(?:\w+[\t\x20]+)?\$\{?[A-Z][A-Z0-9_]{2,16}''',
      # Indicating that the line is part of an example
      '''(?:example|description)''',
    ]

[[rules]]
  id = '12NI0Yd57gc'
  description = 'Controlled Unclassified Information'
  regex = '''\b(?:CONTROLLED|CUI)\/(?:\/[A-Z-]{2,16})+(?:\/\/[A-Z]{0,16})?\b'''
  tags = ['type:cui', 'group:leaktk-testing']
  keywords = [
    'cui',
    'controlled',
  ]

  [rules.allowlist]
    stopwords = [
      'dissem',
      'categories',
    ]

    regexTarget = "secret"
    regexes = [
      # Only SP should allow a dash in the category
      '''[^S][^P]-''',
    ]

[[rules]]
  id = 'w2Sz3reUlWk'
  description = 'NVIDIA API Key'
  regex = '''\b(nvapi-[\w\-]{64})(?:[^\w\-]|$)'''
  tags = ['type:secret', 'group:leaktk-testing']
  entropy = 4


[[rules]]
  # TODO: replace DaAdIBwZoGE with this
  id = "sOZiHxUBVFc"
  description = 'OpenShift User Token'
  regex = '''\b(sha256~[\w-]{43})(?:[^\w-]|\z)'''
  tags = ['type:secret', 'group:leaktk-testing']
  entropy = 3.5
  keywords = ["sha256~"]

[[rules]]
  # Merge with _-9w6-yrc-4
  # This adds api_key, apiKey, api-key etc...
  id = 'RP7YygNHZcs'
  description = 'Generic Secret'
  regex = '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']([^\"\s]+?)[\"\']'''
  entropy = 3.35
  secretGroup = 1
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'key',
  ]

  [rules.allowlist]
    stopwords = [
      # pragma: include "common_stopwords"
    ]

    paths = [
      # Test data are often false positives
      '''(?:^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(?:cli.+\/command_modules\/(?:[^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
      # Ignore OpenAPI spec files
      '''(?:^|\/)openapi\.json$''',
      '''(?i)openapi.*github[^\/]*\.json$''',
    ]

    regexTarget = 'line'
    regexes = [
      # Things like:
      #   secret = "asdfasdfas" # nosec (used by bandit)
      '''#\s*?nosec(?:\s+|$)''',
      #   secret = "asdfasdfas" # noqa: E501
      '''#\s*?noqa(?::[\s\w]+)?$''',
      #   secret = "asdfasdfas" //nolint:gosec
      '''\/\/\s*?nolint:gosec(?:\s+|$)''',
      #   secret = "_PLACEHOLDER_"
      #   secret = "<PLACEHOLDER>"
      #   secret = "@PLACEHOLDER@"
      #   secret = ").append("foo")
      #   secret = "%PLACEHOLDER%"
      #   secret = "$PLACEHOLDER$"
      #   secret = "`PLACEHOLDER`"
      #   secret = "[PLACEHOLDER]"
      #   secret = "[%PLACEHOLDER%]"
      #   secret = "$(PLACEHOLDER..."
      #   secret = "\$(PLACEHOLDER..."
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:_.+?_|<.+?>|@.+?@|\).+?\(|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|\\?\$\(.*)[\"\']''',
      #   secret = "ALL_UPPER_LETTERS_OR_UNDERSCORES"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)[A-Z_]{5,}?[\"\']''',
      #   secret = "{PLACEHOLDER}"
      #   secret = "%{PLACEHOLDER}"
      #   secret = "\%{PLACEHOLDER}"
      #   secret = "${PLACEHOLDER}"
      #   secret = "$\{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      #   secret = "#{PLACEHOLDER}"
      #   secret = "\#{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']\\?[\$%#]?\\?\{.+?\}[\"\']''',
      #   secret = "insert_your_password_here"
      #   secret = "some-ca.crt"
      #   token = "SOME.VALUE.HERE"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)(?:[a-z_\.\-]{0,32}|[A-Z_\.\-]{0,32})[\"\']''',
      #   secret = "Some...placeholder"
      #   secret = "Some***placeholder"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][^\"\']*?(?:\.\.\.|\*\*\*|xxxxx).*?[\"\']''',
      #   "secret="+some_var+"asdfa"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   secret = "(optional char)${PLACEHOLDER}(optional text)"
      #   secret = "(optional char)#{PLACEHOLDER}(optional text)"
      #   secret = "FOO_BAR=($|#){PLACEHOLDER}(optional text)"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:(?-i)[A-Z_]{5,})?.?[\$#]\{.{4,}?\}.*?[\"\']''',
      #   secret = "SOME_CONSTANT_PREFIX_${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}${PLACEHOLDER}"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}[\"\']''',
      #   secret = "$SOME_ENV_VARIABLE-optional-text"
      #   secret = "'$SOME_ENV_VARIABLE-optional-text"
      #   secret = "\$SOME_ENV_VARIABLE-optional-text"
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)\'?\\?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?[\"\']''',
      # Ignore these variable prefixes (add to this list as needed for different prefixes
      '''(?i)(?:mock|example|fake)[\w-]+api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:[^\"\s]+?)[\"\']''',
      # $ gen-base64-search-regex example EXAMPLE change 12345 token hello world passw secret
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][^\"\']*?(?:ZXhhbXBsZ|V4YW1wbG|leGFtcGxl|RVhBTVBMR|VYQU1QTE|FWEFNUExF|Y2hhbmdl|NoYW5nZ|jaGFuZ2|MTIzND|EyMzQ1|xMjM0N|dG9rZW|Rva2Vu|0b2tlb|aGVsbG|hlbGxv|oZWxsb|d29ybG|dvcmxk|3b3JsZ|cGFzc3|Bhc3N3|wYXNzd|c2VjcmV0|NlY3Jld|zZWNyZX).*?[\"\']''',
      # aws.* is already covered by a different rule
      '''(?i)aws.{0,15}api(?:_|-)?key''',
      # jq lookups
      '''jq\s+[\w\-\s]*.*\.\w*(?i)api(?:_|-)?key''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:&lt;|\\u201c|\\u003c|\$)?(?:#!\/|ask|auto|dict|ENC(?:RYPTED)?[\[\(]|RU5DW|VOQ|FTk|false|file:|fixme|grub|https?:\/\/|installation_prefix|libvirt|none|not|self|ssh|spec\.|str:|(?:my)?te?mp|this).*?[\"\']''',
      ## Ends with
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'][^\'\"]*?(\.(?:jpe?g|png|svg|txt|tmpl)|-auth(?:entication)?|-cert(?:ification)?s?|-encryption|-tls|_id|conf(?:ig(?:uration)?)?|cred(?:ential)?s?|data|devel(?:opment)|key|[_-]pwd|raw\(|ya?ml)(?:&gt;|\\u003e)?[\"\']''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}[\"\']''',
       # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?[\"\']''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)api(?:_|-)?key[\"\']?\s*?\]?\s*?[:=]\s*?[\"\'](?:\\u[a-z0-9]{4})+[\"\']''',
      # Already covered by the Slack Token rule
      '''xox[baprs]-[0-9a-zA-Z-]{10,48}''',
      # Already covered by GitHub rules
      '''\bgh[oupsr]_[0-9A-Za-z]{36}\b''',
      '''\bgithub_pat_\w{82}\b''',
      # Already covered byt GitLab rules
      '''\bglpat-[\w\-]{20}\b''',
      '''\bglptt-[0-9a-f]{40}\b''',
      '''\b(?:glrt-|GR1348941)[\w\-]{20}\b''',
      # Ignore things that are probably password prompts in code
      # Example: input("Enter Password:") # Something with "quotes" in it
      '''(?i)[\"\'][\s\w]+(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?:\s*?[\"\']''',
      # Ignore Bitnami Sealed Secrets - This has the potential to cause false
      # negatives but out of all of our data so far I haven't seen one.
      '''[^A-Za-z0-9+\/]Ag[A-Za-z0-9+\/]{256,}''',
    ]

[[rules]]
  id = 'JH9jBKr63QI'
  description = 'Label Studio API Key'
  regex = '''LABEL_STUDIO_API_KEY[\"\']?\s*[=:]\s*[\"\']?([a-z0-9]{40})\b'''
  tags = ['type:secret', 'group:leaktk-testing']
  keywords = [
    'label_studio_api_key',
  ]

[[rules]]
  id = 'X2X0u9K8QKY'
  description = 'SonarQube Token'
  regex = '''(?i)(?:sonar[_.-]?(?:login|token))[\'\"]?[\x20\t]*[:=][\x20\t]*[\'\"]?(?-i)([a-z0-9]{40})\b'''
  keywords = ["sonar"]
  tags = ['type:secret', 'group:leaktk-testing']
