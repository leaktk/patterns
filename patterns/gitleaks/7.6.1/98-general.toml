# General Potential Leak Patterns

[[rules]]
  description = "ArgoCD JWT"
  # Based on shifted b64 encoded portions of '"iss":"argocd"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(ImlzcyI6ImFyZ29jZC|Jpc3MiOiJhcmdvY2Qi|iaXNzIjoiYXJnb2NkI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ["alert:repo-owner", "argocd", "jwt", "type:secret"]

[[rules]]
  description = "Asymmetric Private Key"
  regex = '''-----BEGIN ((DSA|EC|OPENSSH|PGP|RSA) )?PRIVATE KEY( BLOCK)?-----'''
  tags = ["alert:repo-owner", "key", "asymmetric-private-key", "type:secret"]

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(:?^|\/)testdata\/''',
      # Ignore keys in a test(s) folder
      '''tests?\/.*.(:?txt|der|key|pem)$''',
      # Ignore keys with test in their name
      '''[^\/]+test[^\/]+(:?txt|der|key|pem)$''',
      # Ignore common example keys
      '''(:?dummy|example).*(:?key|pem)''',
      # Ignore ssh utilities that might have key headers in them
      '''\/s?bin\/ssh(:?-add|-agent|-autoproxy|-copy-id|-keygen|-keyscan|-sign-request|d)?$''',
      # Ignore libs that might have key headers in them
      '''\/lib\w+\/lib(:?gnutls|ssh).so''',
      # Ignore utils that might have key headers in them
      '''\/lib\w+\/(:?cockpit-|openssh\/ssh-)''',
      # Data dirs that contain key headers to identify them
      '''\/usr\/share\/(:?mime|misc)''',
      # OpenJDK tests with private keys
      '''(:?^|\/)test\/jdk\/sun\/security\/ssl\/''',
    ]

    regexes = [
      # Anything less than 128 characters
      '''PRIVATE KEY( BLOCK)?-----.{0,128}-----END''',
      # The key has spaces in it so it's probably a placeholder
      '''PRIVATE KEY( BLOCK)?-----.*?(\s).*?-----END''',
      # The key has a redacted portion
      '''PRIVATE KEY( BLOCK)?-----.*?(\.\.\.|\*\*\*|xxx).*?-----END''',
      # Ignore some keys assigned to test vars
      # e.g. TEST_SERVER_KEY = """-----BEGIN RSA PRIVATE KEY-----
      '''(?i)\w*(fake|example|test)\w*\s*[:=]+\s*(\[)?\s*(\"\"\"|\"|\'|`)?-----BEGIN''',
      # Things that look like code looking for headers
      #   like: if (privateKey === "-----BEGIN RSA PRIVATE KEY-----") {
      '''if.*==\s*[\"|\']-----BEGIN ((DSA|EC|OPENSSH|PGP|RSA) )?PRIVATE KEY( BLOCK)?-----[\"|\']''',
      #   like: ("-----BEGIN RSA PRIVATE KEY-----")
      '''\([\"\']-----BEGIN ((DSA|EC|OPENSSH|PGP|RSA) )?PRIVATE KEY( BLOCK)?-----(\\n)?[\"\']''',
      #  things ending with stuff like # noqa: E501
      '''#(\s+)?noqa(:[\s\w]+)?$''',
    ]

[[rules]]
  description = "AWS IAM Unique Identifier"
  # Assumes there's at least one non uppercase letter or number before the key
  # to help avoid thinking things in the middle of hashes are keys.
  regex = '''[^A-Z0-9\/](A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)([A-Z0-9]{16})'''
  tags = ["alert:repo-owner", "key", "aws", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ingore example keys
      '''EXAMPLE''',
      # Ingore sample keys (range limit added to ensure the key has some
      # proximity to "sample:")
      '''(S|s)ample:.{0,1000}(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)''',
      # Ignore presigned URLs
      '''X-Amz-Signature''',
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "2"

[[rules]]
  description = "AWS Secret Key"
  regex = '''(?i)aws([^:=(,\/\s]{0,20})?(\s+)?[:=(](\s+)?['\"]?([a-z0-9\/+]{40})([^a-z0-9\/+]|$)'''
  tags = ["alert:repo-owner", "key", "aws", "type:secret"]

  [rules.allowlist]
    regexes = [
      '''arn:aws:iam:''',
      # Ignore common placeholders
      '''(?i)aws([^:=(,\/\s]{0,20})?(\s+)?[:=(](\s+)?['\"]?[a-z0-9\/+]*(e[sx]ample|abcdef|get|name|fake|serv|spec|profile|role|resource|test|curl|cont|conf|cert|xxxxx)''',
      # Ignore EXAMPLE base64 encoded
      '''(?i)aws([^:=(,\/\s]{0,20})?(\s+)?[:=(](\s+)?['\"]?[a-z0-9\/+]*(?-i)(RVhBTVBMR|VYQU1QTE|FWEFNUExF)''',
    ]

  [[rules.entropies]]
    Min = "4"
    Max = "8"
    Group = "4"

[[rules]]
  # Sometimes the values in the config are base64 encoded (e.g. in the case of openshift secrets)
  description = "Base64 Encoded AWS Secret Key"
  regex = '''[a-zA-Z0-9\/\+]*(YXdzX2FjY2Vzc19rZXlfaW|F3c19hY2Nlc3Nfa2V5X2lk|hd3NfYWNjZXNzX2tleV9pZ)[a-zA-Z0-9\/\+]*(QUtJQ|FLSU|BS0lB|UVV0Sl|FVdEpR|RVXRKU|RkxTV|ZMU1|GTFNV|QlMwbE|JTMGxC|CUzBsQ)[a-zA-Z0-9\/\+]*(YXdzX3NlY3JldF9hY2Nlc3Nfa2V5|F3c19zZWNyZXRfYWNjZXNzX2tle|hd3Nfc2VjcmV0X2FjY2Vzc19rZX)[a-zA-Z0-9\/\+]+={0,2}'''
  tags = ["alert:repo-owner", "key", "aws", "type:secret"]

[[rules]]
  # find base64 encoded versions of OpenSSH private keys
  # Base64 shifted versions of "BEGIN OPENSSH PRIV" and "END OPENSSH PRIV"
  description = 'Base64 Encoded OpenSSH Private Key'
  regex = '''[A-Za-z0-9+\/_\-]*?(?:QkVHSU4gT1BFTlNTSCBQUklW|JFR0lOIE9QRU5TU0ggUFJJV|CRUdJTiBPUEVOU1NIIFBSSV)[A-Za-z0-9+\/_\-\s]{256,}(?:RU5EIE9QRU5TU0ggUFJJV|VORCBPUEVOU1NIIFBSSV|FTkQgT1BFTlNTSCBQUklW)[A-Za-z0-9+\/_\-\s]*={0,3}'''
  tags = ['type:secret', 'alert:repo-owner']

  [rules.allowlist]
    regexes = [
      # Base64 shifted versions of: example and EXAMPLE
      '''(ZXhhbXBsZ|V4YW1wbG|leGFtcGxl|RVhBTVBMR|VYQU1QTE|FWEFNUExF)''',
    ]

[[rules]]
  description = "Container Registry Authentication"
  # Works for quay, openshift, redhat, and docker registries
  # Example match: "quay.io": {"auth": "token-token-token-token"
  # It also tries to ignore space around the json
  # (Note: this only works when it's all on a single line)
  regex = '''\\*\"[^\"]*?(?:docker|quay|openshift|openshiftapps|redhat)\.(?:io|com|org)[^\"]*?\\*"\s*:\s*\{[\s\S]*?\\*\"auth\\*\"\s*:\s*\\*\"([\w\/+-]{32,}={0,2})\\*\"'''
  tags = ["alert:repo-owner", "type:secret", "container-registry", "auth"]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

  [rules.allowlist]
    regexes = [
      # Ignore redacted...secrets
      '''\\*\"[^\"]*?(?:docker|quay|openshift|openshiftapps|redhat)\.(?:io|com|org)[^\"]*?\\*"\s*:\s*\{[\s\S]*?\\*\"auth\\*\"\s*:\s*\\*\"[^"]*(\.\.\.|\*\*\*)[^"]*\\*\"''',
      # Ignore example emails
      '''\\*\"[^\"]*?(?:docker|quay|openshift|openshiftapps|redhat)\.(?:io|com|org)[^\"]*?\\*"\s*:\s*\{[\s\S]*?\\*\"email\\*\"\s*:\s*\\*\"[^"]*(?i)example[^"]*\\*\"''',
    ]

[[rules]]
  # Looks for base64 encoded snippets of "auths":..."auth":
  description = "Container Registry Authentication"
  regex='''([a-zA-Z0-9+\/=]+(ImF1dGhzIj|JhdXRocyI6|iYXV0aHMiO)[a-zA-Z0-9+\/=]+(ImF1dGgiO|JhdXRoIj|iYXV0aCI6)[0-9A-Za-z+\/=]{128,})'''
  tags = ["alert:repo-owner", "type:secret", "container-registry", "auth", "base64"]

[[rules]]
  description = "URL User and Password"
  regex = ''':\/\/(?:[^:\/\s\"\']+)?:([^@\/\s\"]{3,})@[\w\.\-]+'''
  tags = ["alert:repo-owner", "password", "basic-auth", "type:secret"]

  [[rules.entropies]]
    Min = "2.4"
    Max = "8"
    Group = "1"

  [rules.allowlist]
    paths = [
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]

    regexes = [
      # Things like: https://user:__pass__@host
      # Things like: https://user:%pass%@host
      # Things like: https://user:<pass>@host
      '''(?i):\/\/([^:\/\s\"\']+)?:(__[^@\/\s]+__|%[^@\/\s]+%|(\[)?(_)?<[^@\/\s]+>(_)?(\])?)@[\w\.\-]+''',
      # Things like: https://user:&lt;pass&gt;@host (HTML for <pass>)
      '''(?i):\/\/([^:\/\s\"\']+)?:&lt;[^@\/\s]+&gt;@[\w\.\-]+''',
      # Things like: https://user:$pass$@host
      # Things like: https://user:$pass@host
      '''(?i):\/\/([^:\/\s\"\']+)?:\$[a-z][a-z\_\-]+(\$)?@[\w\.\-]+''',
      # Things like: https://user:afacae....adsfae@host
      ''':\/\/(?:[^:\/\s\"\']+)?:[^@\/\s\"]*(?:\.\.\.|\*\*\*)[^@\/\s\"]*@[\w\.\-]+''',
      # Things like: https://user:${pass}@host
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:(\")?\$\{[^@\/\s]+\}(\")?@[\w\.\-]+''',
      # Things like: https://user:{pass}@host
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:\{[^@\/\s]+\}@[\w\.\-]+''',
      # Things like: https://user:[pass]@host
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:\[[^@\/\s]+\]@[\w\.\-]+''',
      # Things like: https://user:${pass}@host
      # Things like: https://user:\${pass}@host
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:(\\)?\$\{[^@\/\s]+\}@[\w\.\-]+''',
      # Things like: https://user:$(pass)@host
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:\$\([^@\/\s]+\)@[\w\.\-]+''',
      # Things like: https://user:#{pass}@host
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:\#\{[^@\/\s]+\}@[\w\.\-]+''',
      # Things like: https://user:$SOME_ENV_VARIABLE-optional-text@host
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:(?-i)(")?\$[A-Z][0-9A-Z_]{4,}([\w\-]+)?(")?@[\w\.\-]+''',
      # Things like: https://host:port,org.java.stuff@commit
      ''':\/\/(?:[^:\/\s\"\']+)?:\d{3,4},[\w\.]+@[\w\.\-]+''',
      # Hostnaames to ignore (most hostnames that are just a-z are FPs and there\s example hosts and such)
      ''':\/\/(?:[^:\/\s\"\']+)?:([^@\/\s\"]{3,})@(?:[a-z]+|127\.0.\0\.1|[\w\.\-]*?examples?(?:\.com|\.net)?)(?:[^\w\.\-]|$)''',
      # ip:port type placeholders
      ''':\/\/(?:[^:\/\s\"\']+)?:([^@\/\s\"]{3,})@(ip|host):port''',
      # Is regex
      '''re\.compile\(\s*?r?[\'\"]''',
      # Common spammy placeholder creds
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:(candlepin|default|keylime|rabbitmq|pbench|postgres|prisma|gitops|telemetry|x-oath-basic|redhat)@[\w\.\-]+''',
      # Starts with
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|abc(d|12)|admin|ansible|auto|bool:|change|client|confirm|contrase|demo|dict|django-insecure-|(ENC[\[\(]|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|installation_prefix|invalid|libvirt|none|not|provide|path|quickstart|replace|self|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?@[\w\.\-]+''',
      # Contains
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:[^@\/\s\"]*?(?:example|placeholder|12345|userpass|passw?(o|0)?r?(d|t)!?|sample|secret|open(?:stack|shift))[^@\/\s\"]*?@[\w\.\-]+''',
      # Ends with
      '''(?i):\/\/(?:[^:\/\s\"\']+)?:.+?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-oauth-basic|-demo|-encryption|-tls|_id|_private|(0)?1234(5)?(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|hash|here|json|key|(_|-)pwd|principal|raw\(|registry|required|string|test|token|uuid|value|xxxxx|y(a)?ml)@[\w\.\-]+''',
    ]

[[rules]]
  description = "Dynatrace Token"
  regex = '''dt0[a-zA-Z]{1}[0-9]{2}\.[A-Z0-9]{24}\.[A-Z0-9]{64}'''
  tags = ["alert:repo-owner", "key", "dynatrace", "type:secret"]

[[rules]]
  description = 'Facebook Access Token'
  regex = '''\bEAACEdEose0cBA(?i)[a-z0-9]{128,256}\b'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  description = "Facebook Secret Key"
  regex = '''(?i)(facebook)([0-9A-Za-z_-]{0,20})?(\s+)?[:|=|(](\s+)?(?-i)['\"]?[0-9a-f]{32}['\"]?'''
  tags = ["alert:repo-owner", "key", "facebook", "type:secret"]

[[rules]]
  description = "Google API Key"
  regex = '''AIza[0-9A-Za-z\\-_]{35}([^0-9A-Za-z\\-_]|$)'''
  tags = ["alert:repo-owner", "key", "google", "type:secret"]

[[rules]]
  description = "Heroku API Token"
  regex = '''(?i)heroku(?:.{0,20})?\b([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\b'''
  tags = ["alert:repo-owner", "key", "heroku", "type:secret"]

[[rules]]
  description = "Htpasswd File"
  path = '''htpasswd[^\/]*?$'''
  regex = '''.+?:(\S+)'''
  tags = ["alert:repo-owner", "key", "password", "general", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore comments
      '''^\s*#''',
    ]

    paths = [
      # Ignore these file extensions with htpasswd in the name
      '''\.(?:adoc|c|go|json|java|js|html|md|py|rb|sh|ya?ml)(?:\.\w+)*$''',
    ]

  [[rules.entropies]]
    Min = "4"
    Max = "8"
    Group = "1"

[[rules]]
  description = 'Hugging Face API Token'
  regex = '''\bhf_[a-zA-Z]{34}\b'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  # base64 shifted versions of '"sub":"system:serviceaccount:'
  description = "Kubernetes System Service Account JWT"
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:InN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudD|JzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6|ic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50O)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ["alert:repo-owner", "kubernetes", "system", "service-account", "jwt", "type:secret"]

[[rules]]
  description = "MailChimp API Key"
  regex = '''(?i)(?:mailchimp|mc)(?:.{0,20})?\b[0-9a-f]{32}-us[0-9]{1,2}\b'''
  tags = ["alert:repo-owner", "key", "mailchimp", "type:secret"]

[[rules]]
  description = "Mailgun API Key"
  regex = '''(?i)(?:mailgun|mg).{0,20}?\bkey-[0-9a-z]{32}\b'''
  tags = ["alert:repo-owner", "key", "mailgun", "type:secret"]

[[rules]]
  description = "General Secret"
  path='''(?i)\.[\w\-]*(secret|token|password)$'''
  regex='''^([^\s]{5,})$'''
  tags = ["alert:repo-owner", "type:secret", "general", "secret", "file"]

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
    ]

    regexes = [
      # Common placeholder values only have lower case letters and dashes
      '''^[a-z\-]+$''',
      # shebangs
      '''^#!\/''',
      # Contains
      '''(?i)(?:example|insert|changeme|placeholder)''',
    ]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "1"

[[rules]]
  description = "General Secret"
  # Things like:
  #   password = "value"
  #   password_key = "value"
  #   password-key = "value"
  #   secret = "value"
  #   secret = 'value'
  #   secret_key = "value"
  #   secret-key = "value"
  #   secretkey = "value"
  #   ...
  regex = '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']'''
  tags = ["alert:repo-owner", "general", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "8"

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
      # Ignore OpenAPI spec files
      '''(^|\/)openapi\.json$''',
      '''(?i)openapi.*github[^\/]*\.json$''',
    ]

    regexes = [
      # Things like:
      #   secret = "asdfasdfas" # nosec (used by bandit)
      '''#(\s+)?nosec(\s+|$)''',
      #   secret = "asdfasdfas" # noqa: E501
      '''#(\s+)?noqa(:[\s\w]+)?$''',
      #   secret = "asdfasdfas" //nolint:gosec
      '''\/\/(\s+)?nolint:gosec(\s+|$)''',
      #   secret = "_PLACEHOLDER_"
      #   secret = "<PLACEHOLDER>"
      #   secret = "@PLACEHOLDER@"
      #   secret = ").append("foo")
      #   secret = "%PLACEHOLDER%"
      #   secret = "$PLACEHOLDER$"
      #   secret = "`PLACEHOLDER`"
      #   secret = "[PLACEHOLDER]"
      #   secret = "[%PLACEHOLDER%]"
      #   secret = "$(PLACEHOLDER..."
      #   secret = "\$(PLACEHOLDER..."
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](_.+?_|<.+?>|@.+?@|\).+?\(|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|(\\)?\$\(.*)[\"\']''',
      #   secret = "ALL_UPPER_LETTERS_OR_UNDERSCORES"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](?-i)[A-Z_]+?[\"\']''',
      #   secret = "{PLACEHOLDER}"
      #   secret = "%{PLACEHOLDER}"
      #   secret = "\%{PLACEHOLDER}"
      #   secret = "${PLACEHOLDER}"
      #   secret = "$\{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      #   secret = "#{PLACEHOLDER}"
      #   secret = "\#{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](\\)?[\$%#]?(\\)?\{.+?\}[\"\']''',
      #   secret = "insert_your_password_here"
      #   secret = "some-ca.crt"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](?-i)[a-z._-]{0,32}[\"\']''',
      #   secret = "Some...placeholder"
      #   secret = "Some***placeholder"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(\.\.\.|\*\*\*|xxxxx)[^\"\']*?[\"\']''',
      #   "secret="+some_var+"asdfa"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   secret = "(optional char)${PLACEHOLDER}(optional text)"
      #   secret = "(optional char)#{PLACEHOLDER}(optional text)"
      #   secret = "FOO_BAR=($|#){PLACEHOLDER}(optional text)"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\']((?-i)[A-Z_]{6,})?(.)?[\$#]\{.{4,}?\}.*?[\"\']''',
      #   secret = "SOME_CONSTANT_PREFIX_${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}${PLACEHOLDER}"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'][a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}[\"\']''',
      #   secret = "$SOME_ENV_VARIABLE-optional-text"
      #   secret = "'$SOME_ENV_VARIABLE-optional-text"
      #   secret = "\$SOME_ENV_VARIABLE-optional-text"
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](?-i)(\')?(\\)?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?[\"\']''',
      # Known full placeholder passwords
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](ask|redhat|GoodNewsEveryone|D3faultEntry|TheBlurstOfTimes)[\"\']''',
      # Ignore these variable prefixes (add to this list as needed for different prefixes
      '''(?i)(?:mock|example|fake)[\w-]+(?:password|secret|token)(?:_|-)?(?:access(?:_|-)?)?(?:key)?[\"\']?\s*?\]?\s*?[:=]\s*?[\"\']([^\"\s]+?)[\"\']''',
      # Base64 encoded EXAMPLE, change, and 12345
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(RVhBTVBMR|VYQU1QTE|FWEFNUExF|MTIzND|EyMzQ1|xMjM0N|Y2hhbmdl|NoYW5nZ|jaGFuZ2)[^\"\']*?[\"\']''',
      # aws.* is already covered by a different rule
      '''(?i)aws(.{0,15})(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']''',
      # jq lookups
      '''jq\s+([\w\-\s]+)?.*\.\w*(secret|password|token)(_|-)?(access(_|-)?)?(key)?''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](&lt;|\\u201c|\\u003c|\$)?(#!\/|\/etc\/|data\/|\/path\/|(\/var)?\/run\/|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|(ENC[\[\(]|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|self|ssh|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?[\"\']''',
      ## Ends with
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|-tls|_id|_private|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|hash|here|json|key|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|string|test|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?[\"\']''',
      ## Contains
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(secret|example|credentials|a-z|0-9|12345|manager|redhat|openshift|token|login|java)[^\'\"]*?[\"\']''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}[\"\']''',
      # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?[\"\']''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)(secret|password|token)(_|-)?(access(_|-)?)?(key)?[\"\']?\s*?\]?(\s+)?[:=](\s+)?[\"\'](\\u[a-z0-9]{4})+[\"\']''',
      # Already covered by the Slack Token rule
      '''xox[baprs]-([0-9a-zA-Z-]{10,48})?''',
      # Already covered by GitHub rules
      '''gh(o|u|p|s|r)_[0-9A-Za-z]{36,}''',
      '''github_pat_\w{82}''',
      # Already covered byt GitLab rules
      '''glpat-[\w\-]{20}''',
      '''glptt-[0-9a-f]{40}''',
      '''(glrt-|GR1348941)[\w\-]{20}''',
      # Ignore things that are probably password prompts in code
      # Example: input("Enter Password:") # Something with "quotes" in it
      '''(?i)[\"\'][\s\w]+(secret|password|token)(_|-)?(access(_|-)?)?(key)?:(\s+)?[\"\']''',
      # Ignore Bitnami Sealed Secrets - This has the potential to cause false
      # negatives but out of all of our data so far I haven't seen one.
      '''[^A-Za-z0-9+\/]Ag[A-Za-z0-9+\/]{256,}''',
    ]

[[rules]]
  description = "General Secret"
  regex = '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>([^\"\s]+?)<\/'''
  tags = ["alert:repo-owner", "general", "type:secret"]

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]
    regexes = [
      # Things like
      #   <secret>asdfasdfas</secret> <!-- nosec -->
      '''\s+nosec(\s+|$)''',
      #   <secret>asdfasdfas</secret> <!-- noqa: E501 -->
      '''\s+noqa(:[\s\w]+)?$''',
      #   secret = "asdfasdfas" <!-- //nolint:gosec -->
      '''\/\/(\s+)?nolint:gosec(\s+|$)''',
      #   <secret>$SOME_ENV_VARIABLE</secret>
      #   <secret>SOME_ENV_VARIABLE</secret>
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?(\\)?(\$)?(?-i)[A-Z][0-9A-Z_]{4,}.*?(\]\]>)?<\/''',
      #   <secret>${SOME_VARIABLE}</secret>
      #   <secret>$SomeVariable$</secret>
      #   <secret>{SOME_VARIABLE}</secret>
      #   <secret>%{SOME_VARIABLE}</secret>
      #   <secret>$(SOME_VARIABLE)</secret>
      #   <secret>$\{SOME_VARIABLE}</secret>
      #   <secret><SOME_VARIABLE></secret>
      #   <secret>@SOME_VARIABLE@</secret>
      #   <secret>[%SOME_VARIABLE%]</secret>
      #   <secret>[SOME_VARIABLE]</secret>
      #   <secret><%=SOME_VARIABLE]%></secret>
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?(\\)?(\$|%)?(\\)?(\{.+?\}|\$\w+?\$|\([\w\.]+\)|<\w+>|@.+?@|%\w+%|_\w+_|<%=.+?%>|\[%\w+%\]|\[.+?\]|`.+?`)(\]\]>)?<\/''',
      #   <secret>SOME_CONSTANT_PREFIX_${PLACEHOLDER}</secret>
      #   <secret>/SOME/path:${PLACEHOLDER}</secret>
      #   <secret>/SOME/path:${PLACEHOLDER}${PLACEHOLDER}</secret>
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}(\]\]>)?<\/''',
      #   <secret>asdfsadf...adfadsf</secret>
      #   <secret>asdfsadf***asdfsa</secret>
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?.*?(\.\.\.|\*\*\*).*?(\]\]>)?<\/''',
      #   Base64 encoded EXAMPLE, change, and 12345
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?.*?(RVhBTVBMR|VYQU1QTE|FWEFNUExF|MTIzND|EyMzQ1|xMjM0N|Y2hhbmdl|NoYW5nZ|jaGFuZ2).*?(\]\]>)?<\/''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?(&lt;|\\u201c|\\u003c|\$)?(#!\/|\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC[\[\(]|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|spec\.|str:|(my)?t(e)?mp|test|thefrog|this|update|value|your_)(.+?)?(\]\]>)?<\/''',
      ## Ends with
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?[^<]+?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|-tls|_id|_private|(0)?1234(5)?(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|key|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?(\]\]>)?<\/''',
      # UUIDs
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?(?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}(\]\]>)?<\/''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)<(\s+)?(\w+)?(password|secret)([\s\w\"\'=]+)?>(<!\[CDATA\[)?(\\u[a-z0-9]{4})+(\]\]>)?<\/''',
    ]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "5"

[[rules]]
  # This handles UNQUOTED values in YAML files (the other rules should be able
  # to handle quoted values).
  description="General Secret"
  path='''\.y(a)?ml$'''
  regex = '''(?i)(?:password|secret|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*?:\s+?([^\"\'\s]+?)\s*?(?:#|$)'''
  tags = ["alert:repo-owner", "yaml", "key", "secret", "general", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "1"

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
    ]

    regexes = [
      # Things like:
      #   secret = "asdfasdfas" # nosec (used by bandit)
      '''#\s*?nosec(\s+|$)''',
      #   secret = "asdfasdfas" # noqa: E501
      '''#\s*?noqa(:[\s\w]+)?$''',
      #   - secret: <PLACEHOLDER>
      #   - secret: @PLACEHOLDER@
      #   - secret: %PLACEHOLDER%
      #   - secret: $PLACEHOLDER$
      #   - secret: __PLACEHOLDER__
      #   - secret: _PLACEHOLDER_
      #   - secret: ALL_UPPER_LETTERS_OR_UNDERSCORS
      #   - secret: {PLACEHOLDER}
      #   - secret: ${PLACEHOLDER}
      #   - secret: %{PLACEHOLDER}
      #   - secret: update-your-postgres-pass-here # a common placeholder setup
      #   - secret: Some...placeholder
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(_.+?_|<.+?>|@.+?@|%.+?%|\$.+?\$|(?-i)[A-Z_]{5,}?|(\$|%)?\{.+?\}|(?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?|.*\.\.\..*)''',
      #   - secret: [%PLACEHOLDER%]"
      #   - secret: [PLACEHOLDER]
      #   - secret: $(PLACEHOLDER...
      #   - secret: \$(PLACEHOLDER...
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(\[%.+%\]|\[.+?\]|(\\)?\$\(.*)''',
      #   - secret: SOME_CONSTANT_PREFIX_${PLACEHOLDER}
      #   - secret: /SOME/path:${PLACEHOLDER}...
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}''',
      #   - secret: $SOME_ENV_VARIABLE-optional-text
      #   - secret: \$SOME_ENV_VARIABLE-optional-text
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(?-i)(\\)?\$[A-Z][0-9A-Z_]{4,}([\w\-]+)?''',
      # Ignore EXAMPLE and other base64 encoded words
      '''(?i)(?:secret|password|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*:\s*[^\"\'\s]*?(?:RVhBTVBMR|VYQU1QTE|FWEFNUExF|cGFzc3dvcm|Bhc3N3b3Jk|wYXNzd29yZ|cmVkaGF0|JlZGhhd|yZWRoYX|MTIzND|EyMzQ1|xMjM0N|Y2hhbmdl|NoYW5nZ|jaGFuZ2)''',
      # Ignore secrets that are just lower case letters and dashes and underscores
      # probably a ref to another secret
      '''(?i)(?:secret|password|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*:\s*(?-i)[a-z_-]+\s*?(?:#|$)''',
      # Various words at the start and end that signify a placeholder
      # THESE WILL NEED TO BE UPDATED AFTER MOVING OVER TO MATCH THE OTHER LISTS
      ## Starts with
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(&lt;|\\u201c|\\u003c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|confirm|contrase|demo|dict|django-insecure-|(ENC[\[\(]|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|ssh|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_).*''',
      ## Contains
      '''(?i)(?:secret|password|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*:\s*[^\"\'\s]*?(?:secret|example|bucket|client|credential|12345|redhat|manager|openshift|todo|token|password|release|theblurstoftimes)[^\"\'\s]*?\s*?(?:#|$)''',
      ## Ends with
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*.*(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|-tls|_id|_private|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|hash|here|json|key|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?\s*(#|$)''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(\\u[a-z0-9]{4})+\s*(#|$)''',
      # Ignore Bitnami Sealed Secrets - This has the potential to cause false
      # negatives but out of all of our data so far I haven't seen one.
      '''\bAg[A-Za-z0-9+\/]{256,}''',
    ]

[[rules]]
  description = "GitHub Fine-Grained Personal Access Token"
  regex = '''(github_pat_\w{82})'''
  tags = ["alert:repo-owner", "key", "github", "fine-grained", "access", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub Personal Access Token"
  regex = '''(ghp_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "personal", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub OAuth Access Token"
  regex = '''(gho_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "oauth", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub User to Server Token"
  regex = '''(ghu_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "user-to-server", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub Server to Server Token"
  regex = '''(ghs_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "server-to-server", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub Refresh Token"
  regex = '''(ghr_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "refresh", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitLab Access Token"
  regex = '''(glpat-[\w\-]{20})'''
  tags = ["alert:repo-owner", "key", "gitlab", "access", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitLab Pipeline Trigger Token"
  regex = '''(glptt-[0-9a-f]{40})'''
  tags = ["alert:repo-owner", "key", "gitlab", "pipeline", "trigger", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitLab Runner Registration Token"
  regex = '''((glrt-|GR1348941)[\w\-]{20})'''
  tags = ["alert:repo-owner", "key", "gitlab", "runner", "registration", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = 'Groq API Key'
  regex = '''\bgsk_[A-Za-z0-9]{52}\b'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  description = "NPM Access Token"
  regex = '''\bnpm_[A-Za-z0-9]{36}\b'''
  tags = ["alert:repo-owner", "type:secret", "npm", "access", "token"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "0"

[[rules]]
  description = "NPM Registry Auth"
  regex = '''_(?:auth(?:Token)?|password)\s*=\s*(.+)'''
  path = '''(^|\/)[^\/]+npmrc$'''
  tags = ["alert:repo-owner", "type:secret", "npm", "registry", "auth"]

  [rules.allowlist]
    regexes = [
      # Ignore things like _authToken=${NPM_AUTH_TOKEN}
      '''_(?:auth(?:Token)?|password)\s*=\s*\$\{.+?\}'''
    ]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "1"

[[rules]]
  description = 'OpenAI API Key'
  regex = '''\b(sk-(?:proj-|svcacct-)?[A-Za-z0-9_\-]{32,80}T3BlbkFJ[A-Za-z0-9_\-]{32,})(?:[^A-Za-z0-9_\-]|$)'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  description = "OpenShift Login Token"
  regex='''\boc\s+login\s+.*?--token\s*=?\s*(sha256~[^<\s]{16,})\b'''
  tags = ["alert:repo-owner", "openshift-login", "token", "type:secret"]

  [[rules.entropies]]
    Min = "4.6"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Password Hash"
  regex = '''\$y\$[.\/A-Za-z0-9]+\$[.\/A-Za-z0-9]{0,86}\$[.\/A-Za-z0-9]{43}'''
  tags = ["alert:repo-owner", "password", "hash", "yescrypt", "type:secret"]

[[rules]]
  description = "Password Hash"
  regex = '''\$gy\$[.\/A-Za-z0-9]+\$[.\/A-Za-z0-9]{0,86}\$[.\/A-Za-z0-9]{43}'''
  tags = ["alert:repo-owner", "password", "hash", "gost-yescrypt", "type:secret"]

[[rules]]
  description = "Password Hash"
  regex = '''\$7\$[.\/A-Za-z0-9]{11,97}\$[.\/A-Za-z0-9]{43}'''
  tags = ["alert:repo-owner", "password", "hash", "scrypt", "type:secret"]

[[rules]]
  description = "Password Hash"
  regex = '''\$2[abxy]\$[0-9]{2}\$[.\/A-Za-z0-9]{53}'''
  tags = ["alert:repo-owner", "password", "hash", "bcrypt", "type:secret"]

[[rules]]
  description = "Password Hash"
  regex = '''\$6\$(?:rounds=[1-9][0-9]+\$)?[^$:\n]{1,16}\$[.\/0-9A-Za-z]{86}'''
  tags = ["alert:repo-owner", "password", "hash", "sha512crypt", "type:secret"]

[[rules]]
  description = "Password Hash"
  regex = '''\$5\$(?:rounds=[1-9][0-9]+\$)?[^$:\n]{1,16}\$[.\/0-9A-Za-z]{43}'''
  tags = ["alert:repo-owner", "password", "hash", "sha256crypt", "type:secret"]

[[rules]]
  description = "Password Hash"
  regex = '''\$md5(?:,rounds=[1-9][0-9]+)?\$[.\/0-9A-Za-z]{8}\${1,2}[.\/0-9A-Za-z]{22}'''
  tags = ["alert:repo-owner", "password", "hash", "sunmd5", "type:secret"]

[[rules]]
  description = "Password Hash"
  regex = '''\$1\$[^$:\n]{1,8}\$[.\/0-9A-Za-z]{22}'''
  tags = ["alert:repo-owner", "password", "hash", "md5crypt", "type:secret"]

[[rules]]
  description = "PayPal Braintree Access Token"
  regex = '''access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32}'''
  tags = ["alert:repo-owner", "key", "paypal", "type:secret"]

[[rules]]
  description = "Picatic API Key"
  regex = '''sk_live_[0-9a-z]{32}'''
  tags = ["alert:repo-owner", "key", "picatic", "type:secret"]

[[rules]]
  description = "PKCS #12 File"
  path = '''(^|\/)[^\/]+\.p12$'''
  tags = ["alert:repo-owner", "pkcs12", "file", "type:secret"]

[[rules]]
  description = "PyPI Upload Token"
  regex = '''pypi-AgEIcHlwaS5vcmc[A-Za-z0-9-_]{50,1000}'''
  tags = ["alert:repo-owner", "key", "pypi", "type:secret"]

[[rules]]
  description = "SendGrid API Key"
  regex = '''[^\w]SG\.[\w\-]{16,32}\.[\w\-]{16,64}'''
  tags = ["alert:repo-owner", "key", "sendgrid", "type:secret"]

[[rules]]
  description = "Shopify Access Token"
  regex = '''shpat_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Shopify Custom App Access Token"
  regex = '''shpca_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Shopify Private App Access Token"
  regex = '''shppa_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Shopify Shared Secret"
  regex = '''shpss_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Slack App Token"
  regex = '''(?i)(xapp-\d-[a-z0-9]+-\d+-[a-z0-9]+)'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)xapp-(1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Bot Token"
  regex = '''(?i)\b(xoxb-[0-9]{10,13}\-[0-9]{10,13}[a-z0-9-]*)\b'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)\bxoxb-(?:1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Config Access Token"
  regex = '''(?i)(xoxe.xox[bp]-\d-[a-z0-9]{163,166})'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)xoxe.xox[bp]-(1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Config Refresh Token"
  regex = '''(?i)\b(xoxe-\d-[a-z0-9]{146})\b'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)xoxe-(1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Legacy Bot Token"
  regex = '''(?i)\b(xoxb-[0-9]{8,14}\-[a-z0-9]{18,26})\b'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)\bxoxb-(?:1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Legacy Token"
  regex = '''(?i)\b(xox[os]-\d+-\d+-\d+-[a-f\d]+)\b'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)\bxox[os]-(?:1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Legacy Workspace Token"
  regex = '''(?i)\b(xox[ar]-(?:\d-)?[0-9a-z]{8,48})\b'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)\bxox[ar]-(?:1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack User Token"
  regex = '''(?i)\b(xox[pe](?:-[0-9]{10,13}){3}-[a-z0-9-]{28,34})\b'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''(?i)\bxox[pe]-(?:1234|some|placeholder|slack)'''
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Webhook URL"
  regex = '''(https?:\/\/)?hooks.slack.com\/(services|workflows)\/([A-Za-z0-9+\/]{43,46})'''
  tags = ["alert:repo-owner", "slack", "type:secret"]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "3"

[[rules]]
  description = 'Snowflake OAuth Token'
  # Based on shifted b64 encoded portions any of:
  # - session:role-any
  # - session:role:
  # - "aud":"snowflake
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:c2Vzc2lvbjpyb2xlLWFue|Nlc3Npb246cm9sZS1hbn|zZXNzaW9uOnJvbGUtYW55|c2Vzc2lvbjpyb2xlO|Nlc3Npb246cm9sZT|zZXNzaW9uOnJvbGU6|ImF1ZCI6InNub3dmbGFrZS|JhdWQiOiJzbm93Zmxha2Ug|iYXVkIjoic25vd2ZsYWtlI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  description = "Square Access Token"
  regex = '''sq0atp-[0-9A-Za-z\-_]{22}'''
  tags = ["alert:repo-owner", "key", "square", "type:secret"]

[[rules]]
  description = "Square OAuth Secret"
  regex = '''sq0csp-[0-9A-Za-z\\-_]{43}'''
  tags = ["alert:repo-owner", "key", "square", "type:secret"]

[[rules]]
  description = 'StackRox JWT'
  # Based on shifted b64 encoded portions of '"iss":"https://stackrox.io/jwt"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:ImlzcyI6Imh0dHBzOi8vc3RhY2tyb3guaW8vand0I|Jpc3MiOiJodHRwczovL3N0YWNrcm94LmlvL2p3dC|iaXNzIjoiaHR0cHM6Ly9zdGFja3JveC5pby9qd3Qi)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  description = "Stripe API Key"
  regex = '''(?i)stripe(.{0,20})?[sr]k_live_[0-9a-zA-Z]{24}'''
  tags = ["alert:repo-owner", "key", "stripe", "type:secret"]

[[rules]]
  description = 'Testing Farm API Token'
  regex = '''\bTESTING_FARM_API_TOKEN=[\"\']?[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b'''
  tags = ['type:secret', 'alert:repo-owner']

[[rules]]
  description = "Tines Webhook URL"
  regex = '''(?i)(?:https:\/\/)?[\w\-]+\.tines\.com\/webhook\/[a-z0-9]{32}\/[a-z0-9]{32}'''
  tags = ["alert:repo-owner", "tines", "webhook", "type:secret"]

[[rules]]
  description = "Twilio API Key"
  regex = '''(?i)twilio(.{0,20})?SK[0-9a-f]{32}'''
  tags = ["alert:repo-owner", "key", "twilio", "type:secret"]

[[rules]]
  description = "WP-Config"
  regex='''define(\s+)?\((\s+)?[\"\'](DB_HOST|DB_NAME|DB_USER|DB_PASSWORD|AUTH_KEY|SECURE_AUTH_KEY|LOGGED_IN_KEY|NONCE_KEY|AUTH_SALT|SECURE_AUTH_SALT|LOGGED_IN_SALT|NONCE_SALT)[\"\'](\s+)?,(\s+)?[\"\'](.+?)[\"\'](\s+)?\)'''
  tags = ["alert:repo-owner", "key", "credential", "wordpress", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Things like:
      #   define('AUTH_KEY', '${AUTH_KEY}')
      #   define('AUTH_KEY', '$AUTH_KEY')
      #   define('AUTH_KEY', '{{AUTH_KEY}}')
      #   define('AUTH_KEY', '<AUTH_KEY>')
      '''define(\s+)?\((\s+)?[\"\'](.+?)[\"\'](\s+)?,(\s+)?[\"\'](<.+?>|\{\{.+?\}\}|\$\{.+?\}|\$\w+)[\"\'](\s+)?\)''',
      # Ignore some placeholder values
      '''define(\s+)?\((\s+)?[\"\'](.+?)[\"\'](\s+)?,(\s+)?[\"\']([^\'\"]+)?(-auth(entication)?|example(.com|key)?|here|localhost|pass(w)?or(d|t)|required|secret(s|_v\d)?(key)?|string|test)[\"\'](\s+)?\)''',
    ]
