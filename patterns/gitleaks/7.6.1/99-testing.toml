# Testing Patterns
#
# These patterns are the lowest presidence (i.e. 99-) because they could
# collide with other production patterns. Since secret leak uniquness is
# currently being determined by line (combined with some other attrs), these
# collisions were causing things to be missed. Putting them at the end should
# resolve that.
#
# The Structure of This File
#
# This file is broken into multiple sections. Each section starts with # [file:
# and the filename that the patterns in that section will go into once
# production ready.
#
# Tags
#
# All rules in this should have the group:leaktk-testing tag set and no alert:*
# tags set in addition to the other tags called out by the README.
#
# Promoting to Production
#
# The test patterns are deployed to the pattern server just like the other
# patterns. The leaktk-testing group and lack of alert tags put them in a sort
# of "test mode". The general process for making them production ready is:
#
# 1 Deploy the patterns
# 2 Wait 30 days
# 3 Review the scanner results during the monthly tuning
# 4 Tune the patterns
# 5 If there were too many false positives in the last 30 days, repeat 1-5
# 6 Move the test patterns to the file called out by their section
# 7 Remove the group:leatk-testing tag and add the appropriate alert tags
# 8 Repeat
#
# Note About Moving Patterns
#
# Try to keep patterns roughly alphabetically and/or grouped together. Or rather
# don't spread related patterns out. Spreading them out makes it harder to
# notice when changes need to be made in multiple places with related patterns.
#

# [file:98-general.toml]

[[rules]]
  # env-var-no-space tag used to mark this as different that the other
  # general secret rule. Remove that tag after this is prod ready
  description = "General Secret"
  # Things like:
  #   password=value
  #   password_key=value
  #   password-key=value
  #   secret=value
  #   secret=value
  #   secret_key=value
  #   secretkey=value
  #   ...
  regex = '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=([^\s\"\']{6,})'''
  tags = ["group:leaktk-testing", "general", "env-var-no-space", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "1"

  [rules.allowlist]
    paths = [
      # Test data are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',
      # Ignore OpenAPI spec files
      '''(^|\/)openapi\.json$''',
      '''(?i)openapi.*github[^\/]*\.json$''',
      '''\/lib\w*\/(sudo|sssd|systemd)''',
    ]

    regexes = [
      # Things like:
      #   secret=asdfasdfas # nosec (used by bandit)
      '''#(\s+)?nosec(\s+|$)''',
      #   secret=asdfasdfas # noqa: E501
      '''#(\s+)?noqa(:[\s\w]+)?$''',
      #   secret=asdfasdfas //nolint:gosec
      '''\/\/(\s+)?nolint:gosec(\s+|$)''',
      #   secret=_PLACEHOLDER_
      #   secret=<PLACEHOLDER>
      #   secret=@PLACEHOLDER@
      #   secret=).append("foo"
      #   secret=%PLACEHOLDER%
      #   secret=$PLACEHOLDER$
      #   secret=`PLACEHOLDER`
      #   secret=[PLACEHOLDER]
      #   secret=[%PLACEHOLDER%]
      #   secret=$(PLACEHOLDER...
      #   secret=\$(PLACEHOLDER...
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=?(_.+?_|<.+?>|@.+?@|\).+?\(|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|(\\)?\$\(.*?)(?:\s|$)''',
      #   secret= "ALL_UPPER_LETTERS_OR_UNDERSCORES"
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)[A-Z_]+?(?:\s|$)''',
      #   secret={PLACEHOLDER}
      #   secret=%{PLACEHOLDER}
      #   secret=\%{PLACEHOLDER}
      #   secret=${PLACEHOLDER}
      #   secret=$\{PLACEHOLDER}
      #   secret=\${PLACEHOLDER}
      #   secret=#{PLACEHOLDER}
      #   secret=\#{PLACEHOLDER}
      #   secret=\${PLACEHOLDER}
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(\\)?[\$%#]?(\\)?\{.+?\}(?:\s|$)''',
      #   secret=Some...placeholder
      #   secret=Some***placeholder
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=[^\s\"\']*?(\.\.\.|\*\*\*|xxxxx)[^\s\"\']*?(?:\s|$)''',
      #   secret=(optional char)${PLACEHOLDER}(optional text)
      #   secret=(optional char)#{PLACEHOLDER}(optional text)
      #   secret=FOO_BAR=($|#){PLACEHOLDER}(optional text)
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?:(?-i)[A-Z_]{6,})?(.)?[\$#]\{.{4,}?\}(?:\s|$)''',
      #   secret=SOME_CONSTANT_PREFIX_${PLACEHOLDER}
      #   secret=/SOME/path:${PLACEHOLDER}
      #   secret=/SOME/path:${PLACEHOLDER}${PLACEHOLDER}
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}(?:\s|$)''',
      #   secret=$SOME_ENV_VARIABLE-optional-text
      #   secret='$SOME_ENV_VARIABLE-optional-text
      #   secret=\$SOME_ENV_VARIABLE-optional-text
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)(\')?(\\)?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?''',
      # Secrets that are allow lower case and optionally contain dashes are most often placeholders
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)[a-z\-]+(?:\s|$)''',
      # Known full placeholder passwords
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?:ask|redhat|GoodNewsEveryone|D3faultEntry|TheBlurstOfTimes)(?:\s|$)''',
      # Base64 encoded EXAMPLE in the text
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=[^\s\"\']*?(RVhBTVBMR|VYQU1QTE|FWEFNUExF)''',
      # aws.* is already covered by a different rule
      '''(?i)aws(?:.{0,15})(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?:&lt;|\\u201c|\\u003c|\$)?(#!\/|\/etc\/|data\/|\/path\/|(\/var)?\/run\/|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|provide|path|quickstart|replace|sample|self|ssh|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)''',
      ## Ends with
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=[^\s\"\']*?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|-tls|_id|_private|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|hash|here|json|key|(_|-)pwd|principal|raw\(|registry|required|string|test|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?(?:\s|$)''',
      ## Contains
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=[^\s\"\']*?(pass(w)?(o|0)?(r)?(d|t)(!)?|secret|example|credentials|a-z|0-9|12345|redhat|openshift|token|placeholder)''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}(?:\s|$)''',
      # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?-i)[^\s\"\']+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?(?:\s|$)''',
      # Ignore things that are just escaped unicode characters for now
      '''(?:^|\s)\w*?(?i)(?:(?:secret|password|token)_?(?:access_?)?(?:key)?|api_?key)=(?:\\u[a-z0-9]{4})+(?:\s|$)''',
      # Already covered by the Slack Token rule
      '''xox[baprs]-([0-9a-zA-Z-]{10,48})?''',
      # Already covered by GitHub rules
      '''gh(o|u|p|s|r)_[0-9A-Za-z]{36,}''',
      '''github_pat_\w{82}''',
      # Already covered byt GitLab rules
      '''glpat-[\w\-]{20}''',
      '''glptt-[0-9a-f]{40}''',
      '''(glrt-|GR1348941)[\w\-]{20}''',
    ]

[[rules]]
  # This handles UNQUOTED values in YAML files (the other rules should be able
  # to handle quoted values).
  # Once this is production ready take off the "(YAML) bit so it gets sent with
  # other general secret matches.
  description="(YAML) General Secret"
  path='''\.y(a)?ml$'''
  regex = '''(?i)(?:password|secret|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*?:\s*?([^\"\'\s]+?)\s*?(?:#|$)'''
  tags = ["group:leaktk-testing", "yaml", "key", "secret", "general", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "1"

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
    ]
    regexes = [
      # Things like:
      #   secret = "asdfasdfas" # nosec (used by bandit)
      '''#\s*?nosec(\s+|$)''',
      #   secret = "asdfasdfas" # noqa: E501
      '''#\s*?noqa(:[\s\w]+)?$''',
      #   - secret: <PLACEHOLDER>
      #   - secret: @PLACEHOLDER@
      #   - secret: %PLACEHOLDER%
      #   - secret: $PLACEHOLDER$
      #   - secret: __PLACEHOLDER__
      #   - secret: _PLACEHOLDER_
      #   - secret: ALL_UPPER_LETTERS_OR_UNDERSCORS
      #   - secret: {PLACEHOLDER}
      #   - secret: ${PLACEHOLDER}
      #   - secret: %{PLACEHOLDER}
      #   - secret: update-your-postgres-pass-here # a common placeholder setup
      #   - secret: Some...placeholder
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(_.+?_|<.+?>|@.+?@|%.+?%|\$.+?\$|(?-i)[A-Z_]{5,}?|(\$|%)?\{.+?\}|(?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?|.*\.\.\..*)''',
      #   - secret: [%PLACEHOLDER%]"
      #   - secret: [PLACEHOLDER]
      #   - secret: $(PLACEHOLDER...
      #   - secret: \$(PLACEHOLDER...
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(\[%.+%\]|\[.+?\]|(\\)?\$\(.*)''',
      #   - secret: SOME_CONSTANT_PREFIX_${PLACEHOLDER}
      #   - secret: /SOME/path:${PLACEHOLDER}...
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}''',
      #   - secret: $SOME_ENV_VARIABLE-optional-text
      #   - secret: \$SOME_ENV_VARIABLE-optional-text
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(?-i)(\\)?\$[A-Z][0-9A-Z_]{4,}([\w\-]+)?''',
      # Ignore EXAMPLE and other base64 encoded words
      '''(?i)(?:secret|password|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*:\s*[^\"\'\s]*?(?:RVhBTVBMR|VYQU1QTE|FWEFNUExF|cGFzc3dvcm|Bhc3N3b3Jk|wYXNzd29yZ|cmVkaGF0|JlZGhhd|yZWRoYX)''',
      # Ignore secrets that are just lower case letters and dashes and underscores
      # probably a ref to another secret
      '''(?i)(?:secret|password|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*:\s*(?-i)[a-z_-]+\s*?(?:#|$)''',
      # Various words at the start and end that signify a placeholder
      # THESE WILL NEED TO BE UPDATED AFTER MOVING OVER TO MATCH THE OTHER LISTS
      ## Starts with
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(&lt;|\\u201c|\\u003c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|ssh|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_).*''',
      ## Contains
      '''(?i)(?:secret|password|token)(?:_|-)?(?:access)?(?:_|-)?(?:key)?[\"\']?\s*:\s*[^\"\'\s]*?(?:secret|example|credential|12345|redhat|openshift|token|password|release)[^\"\'\s]*?\s*?(?:#|$)''',
      ## Ends with
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*.*(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|-tls|_id|_private|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|hash|here|json|key|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?\s*(#|$)''',
      # Ignore things that are just escaped unicode characters for now
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(\\u[a-z0-9]{4})+\s*(#|$)''',
    ]

[[rules]]
  description = 'OpenAI API Key'
  regex = '''\b(sk-(?:proj-|svcacct-)?[A-Za-z0-9_\-]{32,80}T3BlbkFJ[A-Za-z0-9_\-]{32,})(?:[^A-Za-z0-9_\-]|$)'''
  tags = ['type:secret', 'group:leaktk-testing']

[[rules]]
  description = 'Hugging Face API Token'
  regex = '''\bhf_[a-zA-Z]{34}\b'''
  tags = ['type:secret', 'group:leaktk-testing']

[[rules]]
  description = 'Facebook Access Token'
  regex = '''\bEAACEdEose0cBA(?i)[a-z0-9]{128,256}\b'''
  tags = ['type:secret', 'group:leaktk-testing']
