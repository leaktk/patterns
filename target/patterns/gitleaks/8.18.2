title = "Gitleaks Config"

[allowlist]
  description = "Global Allowlist"
  regexTarget = "line"

  regexes = [
      # Use notsecret as the standard allow tag.
      # It must begin at the start of the line, comment chars, or a space
      # It must end at the end of the line or with a space
      '''(^|\#|\/\/|\s)notsecret(\s|$)''',
  ]

  paths = [
      # Ignore common binary file types
      '''\.(bin|css|docx|doc|gif|jpg|pdf|png|pyc|socket|svg|xls|zip)$''',
      # Ignore most quickstarts
      '''quickstart''',
      # Ignore things under node modules
      '''(^|\/)node_modules\/''',
      # Ignore vendor code
      '''vendor''',
      # Ignore checked-in ruby packages
      '''(^|\/)gems\/''',
      # Ignore checked-in go packages
      '''(^|\/)Godeps\/''',
      # Ignore go.mod and go.sum files
      '''(^|\/)go\.(mod|sum)$''',
      # Ignore gitleaks related stuff
      '''(^|\/).?gitleaks''',
      # Ignore checked-in python packages
      '''(^|\/)lib\/python[^/]+\/site-packages''',
      # Handle a lot of the github/docs cases
      '''(^|\/)lib\/rest\/static\/.+\/((.+)?github.+\.json|ghes.+\.json)''',
      # Ignore aws secrets
      '''(^|\/)secrets.baseline$''',
      # Ignore a github spec file
      '''(^|\/)specs\/github\.json$''',
  ]

[[rules]]
  id = 'c42a367392fc3aadefbf9caa4de4582a790b8746ed72e6e97fca6f962502597a'
  description = 'ArgoCD JWT'
  # Based on shifted b64 encoded portions of '"iss":"argocd"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(?:ImlzcyI6ImFyZ29jZC|Jpc3MiOiJhcmdvY2Qi|iaXNzIjoiYXJnb2NkI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
    'imlzcyi6imfyz29jzc',
    'jpc3mioijhcmdvy2qi',
    'iaxnzijoiyxjnb2nki',
  ]

[[rules]]
  id = 'ab58b5955845a843962cb6ac631b1d44a0cef6a37e060988e7e58b039706ca51'
  description = 'AWS IAM Unique Identifier'
  # The funky not group at the beginning consists of ascii ranges
  regex = '''(?:^|[^!$-&\(-9<>-~])((?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]{16}))\b'''
  tags = ['alert:repo-owner', 'type:secret']
  entropy = 3.2
  secretGroup = 1
  keywords = [
    'a3t',
    'abia',
    'acca',
    'agpa',
    'aida',
    'aipa',
    'akia',
    'anpa',
    'anva',
    'aroa',
    'asia',
  ]

  [rules.allowlist]
    regexTarget = 'line'
    regexes = [
      # Ingore example keys
      '''\b(?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]*)EXAMPLE\b''',
      # Ignore presigned URLs
      '''X-Amz-Signature''',
      # Ignore sample/example values
      '''(?i)(sample|example).{0,128}\b(?:A3T[A-Z0-9]|ACCA|ABIA|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)(?:[A-Z0-9]{16})\b''',
    ]

# TODO
# "AWS Secret Key"
# "Container Registry Authentication"
# "Dynatrace Token"
# "Facebook Secret Key"
# "General Secret"
# "GitHub Fine-Grained Personal Access Token"
# "GitHub OAuth Access Token"
# "GitHub Personal Access Token"
# "GitHub Refresh Token"
# "GitHub Server to Server Token"
# "GitHub User to Server Token"
# "GitLab Access Token"
# "GitLab Pipeline Trigger Token"
# "GitLab Runner Registration Token"
# "Google API Key"
# "Heroku API Key"
# "Htpasswd File"
# "Kubernetes Service Account JWT"
# "MailChimp API Key"
# "Mailgun API Key"
# "NPM Access Token"
# "OpenShift Login Token"
# "PayPal Braintree Access Token"
# "Picatic API Key"
# "PKCS #12 File"

[[rules]]
  id = 'd5929654009ea640795908a2dcdb07f2f0ebbef42d1ac472bace4b4cd458ce98'
  description = 'Private Key'
  regex = '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\s\S-]*?-----END[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----'''
  tags = ['alert:repo-owner', 'type:secret']
  keywords = [
      '-----begin',
  ]

  [rules.allowlist]
    regexTarget = "line"
    paths = [
      # Test data are often false positives
      '''(^|\/)testdata\/''',
      # Ignore keys in a test(s) folder
      '''test(s)?\/.*.(txt|der|key|pem)$''',
      # Ignore keys with test in their name
      '''[^\/]+test[^\/]+(txt|der|key|pem)$''',
      # Ignore common example keys
      '''(dummy|example).*(key|pem)''',
      # Ignore ssh utilities that might have key headers in them
      '''\/(s)?bin\/ssh(-add|-agent|-autoproxy|-copy-id|-keygen|-keyscan|-sign-request|d)?$''',
      # Ignore libs that might have key headers in them
      '''\/lib\w+\/lib(gnutls|ssh).so''',
      # Ignore utils that might have key headers in them
      '''\/lib\w+\/(cockpit-|openssh\/ssh-)''',
      # Data dirs that contain key headers to identify them
      '''\/usr\/share\/(mime|misc)''',
    ]

    regexes = [
      # Anything less than 15 characters
      '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----[\s\S-]{0,15}-----END[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----''',
      '''(?i)-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----[\s\S-]*?(\.\.\.|\*\*\*|xxx)[\s\S-]*?-----END[ A-Z0-9_-]{0,100}PRIVATE KEY( BLOCK)?-----''',
      # Ignore some keys assigned to test vars
      # e.g. TEST_SERVER_KEY = """-----BEGIN RSA PRIVATE KEY-----
      '''(?i)\w*(fake|example|test)\w*\s*[:=]+\s*(?:\[)?\s*(?:\"\"\"|\"|\'|`)?-----BEGIN''',
      # Things that look like code looking for headers
      #   like: if (privateKey === "-----BEGIN RSA PRIVATE KEY-----") {
      '''if.*==\s*[\"|\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\"|\']''',
      #   like: ("-----BEGIN RSA PRIVATE KEY-----")
      '''\([\"\']-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----(\\n)?[\"\']''',
      #  things ending with stuff like # noqa: E501
      '''#(\s+)?noqa(:[\s\w]+)?$''',
    ]

# TODO
# "PyPI Upload Token"
# "SendGrid API Key"
# "Shopify Access Token"
# "Shopify Custom App Access Token"
# "Shopify Private App Access Token"
# "Shopify Shared Secret"
# "Slack Bot Token"
# "Slack Legacy Bot Token"
# "Slack Legacy Token"
# "Slack Legacy Workspace Token"
# "Slack User Token"
# "Slack Webhook URL"
# "Square Access Token"
# "Square OAuth Secret"
# "Stripe API Key"
# "Twilio API Key"
# "URL User and Password"
# "WP-Config"

# Testing Patterns
#
# These patterns are the lowest presidence (i.e. 99-) because they could
# collide with other production patterns. Since secret leak uniquness is
# currently being determined by line (combined with some other attrs), these
# collisions were causing things to be missed. Putting them at the end should
# resolve that.
#
# The Structure of This File
#
# This file is broken into multiple sections. Each section starts with # [file:
# and the filename that the patterns in that section will go into once
# production ready.
#
# Tags
#
# All rules in this should have the group:leaktk-testing tag set and no alert:*
# tags set in addition to the other tags called out by the README.
#
# Promoting to Production
#
# The test patterns are deployed to the pattern server just like the other
# patterns. The leaktk-testing group and lack of alert tags put them in a sort
# of "test mode". The general process for making them production ready is:
#
# 1 Deploy the patterns
# 2 Wait 30 days
# 3 Review the scanner results during the monthly tuning
# 4 Tune the patterns
# 5 If there were too many false positives in the last 30 days, repeat 1-5
# 6 Move the test patterns to the file called out by their section
# 7 Remove the group:leatk-testing tag and add the appropriate alert tags
# 8 Repeat
#
# Note About Moving Patterns
#
# Try to keep patterns roughly alphabetically and/or grouped together. Or rather
# don't spread related patterns out. Spreading them out makes it harder to
# notice when changes need to be made in multiple places with related patterns.
#

# [file:98-general.toml]
# TODO
# "AWS Account ID"
# "Base64 Encoded AWS Secret Key"
# "General Secret"
# "NPM Registry Auth"
# "Password Hash"
# "Slack App Token"
# "Slack Config Access Token"
# "System Service Account JWT"
# "(Token) General Secret"
# "(Unrestricted) Container Registry Authentication"
# "(YAML) General Secret"

[[rules]]
  id = '44e5461c5358d708f9b9387d50c976907320173c36e6a68d52b61152d76d5da7'
  description = 'Tines Webhook'
  regex = '''(?i)(?:https:\/\/)?[\w\-]+\.tines\.com\/webhook\/[a-z0-9]{32}\/[a-z0-9]{32}'''
  tags = ['group:leaktk-testing', 'type:secret']

